syntax = "proto3";
package fileasset_frontend_api.asset.v1;
option go_package = "fileasset_frontend_api/asset/v1";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";

service AssetService{
  // 服务swagger描述定义
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "文件资源";
  };
  // 上传
  rpc Upload(UploadRequest) returns (UploadResponse) {
    option (google.api.http) = {
      post: "/v1/upload-files/{key}"
      body:"data"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "上传";
      description: "上传文件";
    };
  }
  // 预览
  rpc View (AssetViewRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/v1/upload-files/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "预览";
      description: "预览上传文件";
    };
  }
  // 下载
  rpc Download (AssetViewRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/v1/download-files/{id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "下载";
      description: "下载文件";
    };
  }
}

message AssetViewRequest{
  string id = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["id"];
      description: "id";
    },
    (validate.rules).string = {ignore_empty: false, min_len: 1, max_len: 40}
  ];
  string key = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["key"];
      description: "key";
    },
    (validate.rules).string = {ignore_empty: false, len: 100}
  ];
}

message UploadRequest{
  string key = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["key"];
      description: "key";
    },
    (validate.rules).string = {ignore_empty: false, min_len: 1, max_len: 100}
  ];
  UploadData data = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["data"];
      description: "data";
    },
    (validate.rules).message = {required: true}
  ];
}
message UploadData{
  uint32 chunk_total = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["chunk_total"];
      description: "分块总数";
    },
    (validate.rules).uint32 = {ignore_empty: false, gt: 0, lte: 10000}
  ];
  uint32 chunk_index = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["chunk_index"];
      description: "分块当前索引号";
    },
    (validate.rules).uint32 = {ignore_empty: false, gt: 0, lte: 10000}
  ];
  string ext = 3[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["ext"];
      description: "文件后缀";
    },
    (validate.rules).string = {ignore_empty: false,max_len:100}
  ];
  bytes content = 4[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required: ["content"];
      description: "分块数据";
    },
    (validate.rules).bytes = {ignore_empty: false, max_len: 102400}
  ];
}
message UploadResponse{}