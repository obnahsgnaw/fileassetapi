// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// doc/backend.swagger.json
// doc/frontend.swagger.json
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docBackendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\x5b\x6f\xdb\x46\x16\x7e\xf7\xaf\x18\x68\xfb\x56\xf9\xa2\x24\xbb\x40\x03\x18\x58\x37\x6e\x01\xa3\xbb\x68\xd0\x34\xc5\x02\x69\xd6\x18\x93\x23\x8b\x35\x45\xb2\xe4\xd0\xb1\xdb\x35\xe0\x34\x17\x5f\x6a\xd7\xc6\xd6\x89\x9b\xc4\x4d\xab\xc0\x6d\xbd\xdd\xd6\x76\xb1\x4d\x9a\xd8\xce\xe6\xcf\x88\x94\xf4\xe4\xbf\xb0\xe0\x90\x94\xc8\xe1\x55\xa2\x9c\xc8\xdd\x79\x4a\x2c\xce\x9c\xcb\x9c\x73\x66\xbe\x39\x3c\x33\xfc\xb4\x0f\x80\x9c\x76\x0d\x4e\x4e\x22\x35\x77\x1e\xe4\xce\x0c\x0c\xe5\xf2\xd6\x6f\x82\x54\x94\x73\xe7\x81\xf5\x1c\x80\x1c\x16\xb0\x88\xac\xe7\x6f\x42\x6e\x0a\x49\x3c\x18\xb9\x38\x46\xda\x01\x90\xe3\x91\xc6\xa9\x82\x82\x05\x59\xb2\x5a\xbc\x5f\x42\xa0\x28\x88\x08\x40\x4d\x43\x18\x4c\x38\x1d\xa0\x22\xb8\x1d\xa6\x91\xaa\x39\x8d\x0b\x0e\x3b\x00\x72\x9c\x2c\x61\xc8\xe1\x26\x4f\x00\x72\x12\x2c\x13\xa6\xa8\x28\xce\x3a\xcd\x00\xc8\xe9\xaa\x68\xfd\x58\xc2\x58\xd1\xce\x0f\x0e\x5a\x0f\xfb\x39\x84\xb9\x01\x4e\x2e\xb7\x5a\xa1\x32\x14\x48\x3b\x49\x96\xd0\x9f\xd1\x0c\x2c\x2b\x22\x22\x4d\x48\x8b\xb9\x3e\x00\xe6\x88\xa2\x18\x4e\x6a\xb9\xf3\xe0\x0a\xf9\x39\xc0\x7a\x4c\xe2\xd1\xcc\x25\xa4\x4e\x0b\x1c\x6a\x11\xa7\x54\x6e\x1c\x7e\x55\xdf\xdd\x76\x08\xe7\xc3\x09\xbd\x4b\x5a\x6b\x89\xa4\xe6\x97\x1a\x95\x67\xb5\xdd\x4a\x6d\xfd\x76\x3c\xc1\x11\x6b\x78\x93\xc8\x9d\x1b\x30\xef\x2e\x54\x0f\x9f\xa4\x21\x38\x2a\x5f\x93\x44\x19\xf2\x49\x34\xcf\x0e\x54\x9f\x7e\x5e\x7f\xfe\xdc\xdc\x5a\x35\x96\x2b\xf1\x34\x2f\xc8\x52\x51\x98\x4c\xa2\x68\x2c\xef\x98\xf3\xd7\x1b\xb7\x56\x6b\xcf\x77\xe3\xe9\x5d\x56\xd2\x48\x58\x18\xa8\x3e\x5d\xae\x1e\x7d\x9b\x46\xc2\x0f\x04\x74\x2d\x89\xde\x99\x81\xc6\xa3\x9b\xf5\x1f\x16\x7d\xf4\xfa\x00\xb8\x4a\x1c\x48\xe3\x4a\xa8\x8c\x5a\x3e\x44\x3c\xd3\xf5\x6a\xe2\xa5\xb9\x66\x5b\x4e\x96\x34\xdd\xd7\x18\x2a\x8a\x28\x70\xd0\x62\x35\xf8\x91\x26\x4b\x6e\x47\xef\xef\x32\x87\x11\xee\xd7\xb0\x8a\x60\xb9\x45\x4b\x51\x65\x5e\xe7\xba\x44\x0b\xe2\x92\xd6\x0a\xf7\xc1\xe9\xc2\x20\x47\x4c\xe7\x0d\xc7\x49\xe4\x8d\x4e\x4b\x73\xbd\x5c\x86\xea\x2c\xf1\x5b\x62\xbc\xea\x8b\x8a\x79\x7d\xaf\x39\x8e\xc1\x91\xac\xbf\xd8\x30\x1e\x3c\xb4\xc7\xd1\x78\xfe\xa5\xb1\xb4\x1a\xd5\x51\x56\x90\x4a\x24\x1e\xe3\x03\x8e\x34\x3e\x8a\xb0\x15\xdd\x9e\xe6\x2a\xd2\x14\x59\xd2\x90\xe6\x93\x10\x80\xdc\x99\xa1\x21\xea\xa7\xa0\x54\x23\x40\xd3\x39\x0e\x69\x5a\x51\x17\x81\x4b\x69\xc0\x43\xde\xd6\xd6\xb2\x33\x0c\x10\x03\x20\xf7\x9a\x8a\x8a\x16\x9d\x3f\x0c\xf2\xa8\x28\x48\x02\x89\xf4\xc1\xe9\x82\x2d\x74\xce\xd7\x7c\xce\xf3\xd7\x5c\xde\x2f\x69\x21\x51\xd2\xf7\x10\xd6\x55\x09\xf1\xe0\x5a\x09\x49\x00\x97\x90\x25\xae\xac\xab\x1c\x02\x9c\x8a\x20\x46\xbc\xab\x4a\x8c\xf8\x71\x22\x9c\xcb\x22\x02\x8f\x44\x94\x55\x84\x73\x29\xec\x15\x26\xc2\xc7\x3a\xd2\x30\xe0\x21\x86\x60\x1a\x8a\x02\x0f\x31\x02\x45\x28\x88\x88\xef\x82\x21\xdf\x52\x55\x59\xd5\xde\x9d\xf8\x08\x71\x38\xad\x39\xcf\x75\x64\x4e\x5d\x43\x2a\xe0\x65\xa4\x01\x49\xc6\x00\xea\xb8\x84\x24\xec\xc4\x6e\x87\xe3\x79\x36\xb3\x18\x25\x38\x8d\x80\x82\xd4\xb2\xa0\x59\x0b\x37\xc0\x32\x80\xc4\xc2\x3e\xf3\x77\x28\x5e\x26\x8f\xb3\xa4\x2b\xca\xba\x14\x67\xe4\x38\xe6\x6f\xb4\xc9\xdc\xf5\x33\x5d\x21\x0e\x66\xcd\x91\xa2\xc0\xe1\xce\xb8\x9f\x69\xd7\x32\x4d\xb5\x45\x99\x9b\x8a\x75\xec\x38\xae\x9d\xea\x8c\x65\x19\x94\xa1\x34\x0b\x04\x09\x40\xa0\x4b\x02\x06\x58\x28\x77\x66\xf6\x3f\xa6\x88\x72\x6b\xb2\x47\x2a\x40\x56\xec\x75\xc4\x84\x47\x45\xa8\x8b\x38\x91\xd1\x65\x09\xcd\x28\x88\xc3\x89\xac\xba\x3c\x5d\xf4\x85\x88\xed\x87\xa3\xce\x6f\x7e\x14\xd5\x7c\x72\xd5\xd3\x4d\x43\x9c\xae\x0a\x78\x96\xea\x4a\x29\x3e\xa2\x28\x64\x39\xbd\x72\x95\xd2\xf1\x4d\x04\x55\xa4\xbe\x2f\x4f\x21\x89\x3c\x0e\x15\xd3\xfd\xb5\x29\x6e\x4e\xd1\xa3\x11\x81\xf9\xe0\x57\xf3\xee\xbe\x03\xea\xa2\x11\x81\xdd\x2c\x33\x22\xb8\x4c\x02\x92\x21\x02\x86\x08\x18\x22\x60\x88\x80\x21\x82\xb6\xb8\x32\x44\xd0\xcb\x88\x40\x81\x2a\x2c\x23\x8c\x54\x1a\x17\x50\x3a\xb8\x19\x0d\x1e\x4d\xe8\x93\xb4\xc8\xf4\x3e\x7c\xff\x46\x7d\xef\x8e\xb9\x53\x31\x8e\xd6\xe8\xa6\x02\x69\xf1\xb1\x8e\xd4\x59\xfa\x91\x65\x78\x41\x45\xd6\xfa\x5b\x84\xa2\x86\xa8\xc7\x78\x56\x21\x12\x4c\xc8\xb2\x88\xa0\x94\x0b\x47\x11\xa7\x0c\xec\x90\x7f\x1d\x7b\x90\xc4\x08\xef\xe4\xc9\xfa\xed\x44\x64\x33\x3d\xa2\xc8\x5a\x34\x1a\xaa\x7f\xf1\x9b\xb1\x76\xd7\x4e\x9c\x19\x5b\xfb\xc6\xd7\xf3\x31\x98\xc8\xb8\xf5\xa4\x7a\x78\xd7\xc6\x44\xc1\x8e\xc6\xde\x33\x63\xfb\x6e\xed\xf0\x9e\xb1\x70\x70\x7c\xb4\x52\x7f\x71\xaf\xb1\xb0\x52\x7d\xf6\x8d\xb1\xb6\x57\x3d\xfc\xce\x5c\xfa\xdc\x58\xde\xb1\x7b\xc5\xa0\x27\x2a\xd9\x37\xfe\x36\xc2\x5c\xe9\xb2\xda\xeb\x39\x95\xa2\x20\x22\x92\x57\x1e\x77\xf2\xca\xe3\x50\x11\x5c\x83\x4c\x17\x5c\x2d\xde\x73\xf8\x31\xa0\xd5\x8e\x08\x0c\x68\x31\xa0\xc5\x80\x16\x03\x5a\x0c\x68\xa5\x03\x5a\x13\x32\x1f\x40\x48\x36\x78\x0a\x7b\xe2\xc1\x4e\x58\xd5\x69\xe8\x74\x62\x0b\x21\x71\xa0\x34\x23\x91\x84\xcb\xe8\xd7\x83\x3d\x88\xcc\xac\x41\xd1\xd2\xbe\xb1\x32\x16\x37\xeb\x95\x9d\xb8\xcc\x14\x79\x73\x1a\x6c\x46\x21\x29\xef\x7b\xd8\xf1\x8b\x70\x52\x90\x4e\x43\x22\xca\x15\x94\x21\x25\x86\x94\x18\x52\x62\x48\x29\x92\x3b\x43\x4a\x0c\x29\xd1\x62\xb7\x8d\x94\x14\x38\x89\x12\x32\x52\x17\xe1\x24\x02\x92\x5e\x9e\x40\x6a\x1e\x38\x83\x32\x5c\xe8\x7e\x6e\x4a\x90\x30\x9a\x44\x2a\xdd\xbb\x28\xab\x65\x88\x9d\x06\x7f\x3a\x97\x8b\xb2\x57\x84\x82\xa2\x50\x16\x70\x1a\x0d\x35\xe1\x13\xe4\xd1\x6f\xe8\xb4\x28\x38\x85\x66\xaf\xc9\x2a\x9f\xa0\xe2\x3b\x76\x2b\xa0\x21\xa8\x72\xa5\x3c\x10\x85\x29\x74\xde\xe9\x3a\x3c\x33\x73\x7c\xb4\xe2\xfe\x21\xf0\xc3\x85\x7f\x58\xc4\x87\x67\x66\x66\xba\x3f\x08\x1a\x56\x05\x69\xb2\x5d\x25\x35\x59\x4d\x32\xe2\x25\x59\xc5\x40\x14\x34\xec\x28\x07\xac\x3e\xc3\xaf\xc3\x7c\xff\x44\xfe\x75\x2e\xdf\x1f\x18\xa1\x13\xd1\x25\x35\x68\xf7\x15\x09\xf6\x2a\x62\x1f\xfc\x54\xe0\xe7\xbc\xb0\xdd\x86\x68\x31\xc8\xfd\xdb\xc6\xbd\xed\xb8\xfc\x29\x69\x60\xe3\xf7\xb4\xc8\x7d\xd4\xe6\xd9\x2b\xb8\xdd\x35\xbe\x6c\xcf\xcf\x79\xfa\xb9\xa2\x5a\xca\x60\xc1\x96\x6e\x8e\xa1\xf7\x36\x44\x60\xe8\x9d\xa1\x77\x86\xde\x19\x7a\x67\xe8\x3d\x1d\x7a\x17\x92\x60\xdf\xd8\x68\x38\xea\x51\x20\x2e\xb5\x97\x06\xcd\x00\x62\x7f\x37\x98\x48\xb6\x4f\x8a\xa4\xcd\x63\xda\x27\x46\x62\x60\x8e\xff\xe4\xc9\xb8\xfd\xe7\x5f\x04\x0d\xf7\x0c\xd8\x89\x72\xf2\x96\xa8\x2c\x4d\xc9\x80\x0e\x03\x3a\x0c\xe8\x44\x72\x67\x40\x87\x01\x1d\x5a\xec\xd0\xd5\x9f\x3a\x87\xd9\x95\xf5\x3f\x11\x86\xcc\xf4\xcb\x2a\x4f\x0e\xd8\x16\x22\x97\x7d\x9d\x1c\x6d\xec\x27\xc7\xee\xd4\x72\xea\xc2\xb2\x5a\x65\xb7\xbe\xbb\x6d\x9f\x77\xac\xdd\xbf\x19\x4c\x7a\x50\x06\x0a\x6d\x7f\x7c\xb4\x62\xac\x7f\x6f\x2c\xde\xab\x1e\xdd\xaf\x3f\xfa\x77\x7d\xe1\x47\x63\x79\xc7\xbc\x71\xcb\xb8\xfd\x38\x06\x58\xf8\x0e\x63\x8e\x5f\x70\x04\xef\x75\x50\xe1\xc8\xc9\x10\x05\x43\x14\x0c\x51\x30\x44\x11\xc9\x9d\x21\x0a\x86\x28\x68\xb1\x4f\x55\x89\x98\x67\xa9\xeb\x5a\x11\x98\xff\xfe\x85\xae\x80\xa7\xee\x26\x4f\x1c\x14\x45\x95\xe6\xc7\xe5\x4f\xdc\x02\x7b\x0b\x10\x75\x54\x99\xdf\xea\xd8\x95\xca\x7c\x3f\xaa\x3a\xcd\x75\xf9\xb6\x2d\x58\x55\x3e\x83\x5c\x80\x41\x2e\x06\xb9\x18\xe4\x62\x90\xeb\x65\xd4\x9a\xa9\x72\x48\xc9\x04\xad\x62\x44\xab\x74\xd5\x3a\x31\x2f\xae\x3a\x2b\x3c\x2a\xcb\xbc\x2e\x26\x55\xc8\x85\x37\x7a\x55\x12\xc3\x99\x4b\xc2\x27\x49\x22\xdb\xd9\x25\x73\x6b\xde\xd8\xfe\xc1\xf8\x79\xb3\xbe\xfc\xd9\x87\xd2\x87\x92\x16\xd2\xb1\x57\xeb\xde\x38\x59\xc2\x48\xc2\xef\x5b\x4c\x12\x74\xdd\xd8\x33\x57\xae\xd7\xee\xdf\xac\xfd\x72\x68\x3c\xfc\xdc\x52\xd4\xe9\x3c\x8e\x43\x7a\xbf\x22\xbb\xa1\x19\x8c\x24\x72\xfb\x5e\x4a\x6d\x8c\xf5\x2f\x6a\x47\xf3\x96\x36\x91\x5d\x5f\x91\x2a\x18\x8b\x09\x4a\xd4\x5f\x2c\x98\x5b\xdf\x98\x9b\x4f\x1a\x9b\xbf\x5a\x1a\x84\xf4\xc8\x2c\xfb\xc9\xb8\x9d\x02\x13\x2b\x11\x8d\xc5\xdb\xb5\xa5\x05\xf3\xce\x7e\x63\x61\x0d\x0c\x0d\x57\x9f\xae\x1a\x8b\xb7\x2d\x2d\xad\xbe\x40\xd2\xcb\x3d\x11\x62\xbf\x9f\x9d\x65\xeb\xd6\xca\x54\xdb\xca\xda\xd2\xa2\xb9\xf5\x93\xb1\xf6\x5b\xcc\x6e\x32\x78\x1b\x5e\x68\x2f\x6a\x83\xe8\xbd\x92\x72\xfc\x03\x47\xaa\xde\xde\x1e\x4e\x17\x1c\x39\xd9\x16\x90\x6d\x01\xd9\x16\x90\x6d\x01\x23\xb9\xb3\x2d\x20\xdb\x02\xd2\x62\x87\xe2\x05\xdf\xc5\xcc\x5d\x81\x0b\xed\xe2\x01\x01\x5d\x6b\x3f\xcf\x6c\x5f\x24\xdc\x41\x9e\xd9\xdb\xb1\x2b\x79\x66\xcf\xc5\xc7\xe3\xd6\xff\x7b\x3f\xc9\x3c\x5d\x70\xe4\x64\x28\x82\xa1\x08\x86\x22\x18\x8a\x88\xe4\xce\x50\x04\x43\x11\xb4\xd8\x2c\x91\xdc\x93\x89\x64\xf2\x6f\xbc\xbc\x61\x4d\x7a\x36\xe7\xd8\x23\x39\xc6\x50\x44\x1c\x86\xa3\xbd\xdf\xbf\xe8\x0a\x8c\xee\x72\xd6\xcd\x41\xd9\xa9\x8f\xc3\x9c\x02\x98\xad\x9d\x16\x9c\xad\x31\xa0\xcd\x80\x36\x03\xda\x0c\x68\x47\x72\x67\x40\x9b\x01\x6d\x5a\x6c\x06\xb4\x7b\x16\x68\x6b\x29\x90\x76\xa0\x4d\xf6\xf7\xc6\x50\x55\x61\xb0\x0c\x1a\xa3\x32\x0d\x7a\xc2\xd4\xcc\xd3\xcf\x3d\x4c\xaf\x50\xcf\x80\xab\x02\xf5\xfb\x55\xbf\x07\x53\x92\x70\xb2\x28\x22\xce\x1a\x83\xb7\x9b\x88\xba\xac\x8b\x58\x60\xbb\x83\x5e\xdc\x1d\x34\xbf\xdc\xe8\x99\xb1\x9a\x7e\x94\x6b\xf3\x62\x54\xcf\xae\x22\xe2\xca\x1d\xea\xaa\x1d\xcf\x34\xe7\x4c\x48\x14\x6e\x8f\x71\xdf\xa8\x29\x2d\x74\x16\x75\x26\x8f\xce\xa9\x3b\x04\x42\x89\x3b\x1e\xdb\x29\x69\xd2\x3d\x94\xb0\xe5\xe0\x11\x74\xc3\xfc\x34\xe0\xa5\x71\x5c\xe9\xe0\x69\x7d\x95\xd4\x5b\xe8\x13\x2e\x17\x27\xeb\x52\xa4\xa9\x32\x4b\x66\x53\x0f\x97\xcd\xf9\x58\xe6\x4f\x15\xf3\xce\xbe\x47\xb6\x3e\x4a\xc6\xf0\x69\x2d\x64\xd5\x0b\xae\x2a\x74\x82\x84\x1a\x28\x47\x3a\xe7\x6f\x3b\x98\xdc\x2d\x76\xbb\xf7\xe9\x67\x08\x17\xff\xab\x32\xd0\xa6\xc7\x59\xbd\x83\x83\x97\xac\x4b\xe4\x19\x84\x0c\x9a\x9c\xce\xc8\x8c\x19\xff\xe0\xfa\x1c\xb1\x3a\xa7\x85\x20\x61\xd6\x0b\x8f\x0e\xe3\xfb\xcf\xcc\x87\x5b\x76\x2d\x5b\xf5\xe8\xbe\x5d\x11\x65\x6c\xdf\xaf\x3e\xfd\x11\x98\x4b\xf3\xd5\xc3\xef\xcc\xaf\xf6\xec\xbf\xdb\x0f\x9e\x88\x48\x09\x8d\x84\xe6\xb7\xb9\x32\x38\x86\xfd\xe5\x95\x88\x41\x76\x3f\x8a\x12\x37\x4e\xbe\xcf\xb2\x24\xb8\x7b\xe0\x78\xd7\xff\xe9\x52\x86\xa1\x4a\xe7\x03\xdb\x23\xee\x10\x88\x8c\xc6\x40\x66\xee\xa5\x85\x4d\x10\x8e\x7b\x02\x87\xc4\x84\x73\x47\x39\x49\x48\x1a\xeb\x2b\xe6\xe6\x13\xfb\x7c\xff\xf1\xd1\x0a\x89\xa6\x07\xf5\xca\x8a\xf1\xe8\xa1\xb1\xf8\xad\xfd\x9d\xbd\xce\x17\xa0\xb8\xa0\xf1\x9c\xa6\xcf\xe0\x84\x4e\xca\x2d\x29\x7e\x42\xed\x44\xb6\xbd\x09\x3e\x90\x18\x4f\x6f\x49\x70\x42\x44\x97\x30\xc4\xa1\x7a\x50\xae\x94\x43\x92\x5e\xf6\x8f\xd5\xa8\xa0\x59\x14\xbc\xd7\x65\xe5\x6c\xa2\xbe\x9f\x46\x9d\x4d\xbd\x3b\xa4\x4d\x8a\xad\xdd\x7e\x90\x94\xc7\xf2\xeb\x7b\xb5\x8d\x1d\x50\xfb\xfe\x7a\x6d\x63\x27\x47\xeb\x60\x0d\x84\xb3\x6d\xcf\x60\x0b\x4e\xe6\x23\xe3\x35\x33\x5a\x72\x9d\xc5\x4e\x56\x00\xc2\xcb\xd7\x5e\x81\x18\x23\x95\xb4\xfd\xfb\x95\xa1\xfe\x37\xae\x7e\x5a\xc8\xcf\xbd\x16\x31\xb7\x20\x4d\x83\x93\x59\x26\x17\x4a\x1c\x97\x60\x4c\xa4\x34\x4d\xd1\xd8\xb8\x57\xdf\xdb\x0b\xb5\x81\xc6\x8c\xd0\x55\x23\xd0\xc1\xde\xc5\x59\x39\xf4\x8e\xd5\xf8\xcc\x58\x30\x31\x16\x3b\x91\xfb\xb5\x8b\x9a\xd2\x6d\x6f\x6a\x7c\xf9\xdf\x36\x7c\x0f\xd8\xeb\x40\xb8\x23\xbe\x2d\x88\x88\xdc\x76\x97\xc5\x0b\x05\xfe\xc4\x7c\x50\xe0\xc3\x0d\x9c\x1d\x8e\xd8\xaf\xf4\x1a\x95\x67\xb5\x07\xbb\x27\x84\x49\x2c\x94\xf6\xf5\xe6\x89\x80\x78\xe7\x12\x9f\x93\x81\x3b\xb5\xdd\x4a\x6d\xfd\xb6\xb1\xf7\xac\xfe\x4b\xa5\xed\x9d\x42\x0a\xfa\xbe\x57\xaf\xe1\xf1\xeb\x2c\x89\x14\x8f\xc8\x80\xf3\x2c\xcb\x71\x8c\xed\x75\xb1\xb6\xfc\xc4\x9c\xbf\x1e\x91\x04\xb0\xdf\x2f\x8e\xb4\x35\x7c\x2d\x87\xe6\x21\x46\xfd\x58\x28\x27\x88\xb1\xf8\xc0\x38\x3c\x08\xe4\x22\xa2\x03\xd9\xb6\x76\xfd\xf1\x4d\xf3\x60\x9d\x8e\xe0\x31\x09\xbf\xeb\x52\x7e\x25\x11\x7c\xf6\x4c\xac\xb2\x63\xa3\x27\x12\x00\xc6\xfa\x6a\xed\x87\x58\xb0\xda\x1c\x3d\x81\x07\x16\x33\x60\x7c\xb9\x6a\x1c\x6c\xd0\xe3\x17\x72\x83\x64\x86\x81\x44\xa1\x00\x11\xbc\xcc\xd5\xa7\xe5\x10\x69\xd7\x1e\x2b\x2c\x08\x54\x0c\x44\x46\x04\x0c\x76\x3f\x0d\x94\x7d\x3f\xec\x5c\xf6\xef\x5c\xb9\xf6\xaa\x86\xec\x12\xf1\xb7\x76\x47\xed\xd6\x7f\x1a\x1b\xbb\xc6\xcf\x9b\xf6\x69\x4e\xfb\x92\xd5\xe3\xa3\x15\x3b\x5f\x51\x7d\x7a\x50\xfb\xd7\x81\xb1\x78\xcf\x58\xfb\xd1\xdc\x5a\x6a\x36\x36\xd7\xb7\x6a\xbf\x3e\x0a\x0f\x09\x4d\x56\xf1\x05\x59\xd4\xcb\xd1\x23\x11\xa2\x57\x0e\xf2\x3c\xd1\x04\x8a\x17\xc3\x47\x19\x64\xd8\x60\x1a\x6b\x7b\xe6\x17\xff\x34\x0e\xd6\x8c\xc5\xcd\xfc\x14\x9a\x1d\x36\x16\x37\x8f\x8f\x56\xa6\xa1\xa8\xa3\x61\x63\xed\x33\xf3\xce\xfe\x14\x9a\x0d\xd7\xc7\xbe\xa6\xb6\x07\x35\xaa\xbf\x58\x30\x0f\xb7\x6d\x8b\x59\x7a\x01\x5a\x31\x5b\xf2\x66\x83\x7a\x65\xa7\x76\xff\xa6\x5f\xcf\x84\xd0\xf8\x2b\xc2\x30\x4b\x60\x60\x19\xc3\x93\xcb\x93\xbf\xe7\xbe\x63\x27\x6c\x80\xa4\x97\xb5\x08\x9c\x15\x83\xd9\x33\x4b\x71\x41\x57\x55\x24\x61\x60\x31\x01\x51\x48\xcf\xfe\x6e\xca\x4b\x11\x81\x9c\x3a\x0f\x87\x05\xf4\x44\x07\xe2\xa6\x13\x6a\x7a\x8c\x87\x02\x96\x73\x35\x6e\xad\xd6\x9e\xef\xe6\x89\x14\xc3\x05\x73\xf3\x89\xb9\xb5\x64\xff\x76\x7c\xe4\x94\x93\xd5\x6f\x3c\xaf\x3e\x3d\x90\x84\xb0\x1c\x77\x48\x02\x60\xf1\x76\xa3\xf2\xd8\xb8\x75\xc3\xbc\xb3\x6f\xae\xee\xd2\x6b\x5e\xe0\xd3\x6e\x59\x52\xdd\x7e\x47\x4f\x35\x30\x24\x38\x22\xac\xad\x45\x1a\xfb\xa4\x57\x81\xd6\x5e\xc8\x3b\x95\x24\x46\xbc\x6f\xf1\x38\x11\x0c\x96\x02\x0e\xbd\x7a\x94\x35\x85\x66\xe3\x60\x16\x7d\xba\x37\xc3\x40\x05\x8f\x59\xb7\xab\x56\xeb\x0c\x75\xa2\x75\xe9\xf3\x44\xbd\xfc\x7a\x2b\xa4\x2a\x33\x9b\xb8\xbd\xb3\x68\x47\xbf\x1e\x22\x3e\x37\xfc\xa1\x3e\x34\x74\x16\x81\xb8\x41\x6a\x16\x05\xb8\x05\x09\xa3\x61\xc5\x01\x6e\x1d\x42\x60\xd8\xa0\x22\xbc\x83\x5a\xd3\x4f\xb3\xa2\xe3\x6f\xfd\x23\x8a\xd2\x3f\xe6\x49\xc3\xda\xe5\x1a\x25\x04\x79\xa4\xfa\xc3\xc0\x5f\xcb\x90\x9a\xc5\x88\x8e\x4b\xb2\x2a\x7c\x42\xea\x23\x63\xf9\x58\x3a\xf6\xcd\xf5\xfd\x2f\x00\x00\xff\xff\xe1\x31\x6a\x67\xb3\x93\x00\x00")

func docBackendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docBackendSwaggerJson,
		"doc/backend.swagger.json",
	)
}

func docBackendSwaggerJson() (*asset, error) {
	bytes, err := docBackendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/backend.swagger.json", size: 37811, mode: os.FileMode(420), modTime: time.Unix(1708603270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docFrontendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6b\x1b\x47\x10\x7f\xd7\xa7\x18\xae\x79\xb4\x22\xcb\x71\x0b\xf1\x53\x5d\xd2\x82\x68\x21\x25\x49\x4b\x21\xb8\x61\xb3\x37\x27\x6d\x72\xb7\x7b\xdd\x9d\x53\xac\x06\x41\xf2\x52\x9a\x80\x69\xc0\x7e\xe8\x9f\x50\x30\x84\xb6\x94\x12\xf7\xa9\x7f\x69\xfb\x65\x2a\xcb\xfe\x16\xe5\x56\x77\xba\x3f\x3a\xc9\xb2\xe4\x40\x1f\xf4\xa8\xdb\xd9\xf9\xfd\x66\x7e\x73\x3b\x73\xab\x87\x35\x00\xc7\x3c\x60\xed\x36\x6a\x67\x0b\x9c\x8d\xcb\xeb\xce\x5a\xfc\x4c\x48\x4f\x39\x5b\x10\xaf\x03\x38\x24\xc8\xc7\x78\xfd\x1d\xad\x24\xa1\x74\x61\xfb\xfd\x96\x35\x04\x70\x5c\x34\x5c\x8b\x90\x84\x92\xb1\xc9\xad\x0e\x82\x27\x7c\x04\x66\x0c\x12\x78\xe9\x0e\x16\x8a\x74\x47\x17\xb5\x49\xac\x9b\x09\x20\x80\xc3\x95\x24\xc6\x69\x8c\x0a\xe0\x48\x16\x58\x58\xf4\xfc\x5e\x62\x06\xe0\x44\xda\x8f\x1f\x76\x88\x42\xb3\xd5\x68\xc4\x8b\x75\x8e\xc4\x2f\x73\x15\x64\x56\x18\x30\x61\xed\xa4\x92\xf8\x26\xee\xb2\x20\xf4\xd1\x9a\x58\x8b\x7e\x0d\xa0\x6f\x43\x25\xd6\x36\xce\x16\xdc\xb6\x8f\x27\xa0\x5b\xd2\xc5\xdd\x9b\xa8\xbb\x82\x63\xe6\xbc\x14\xf3\xe9\x9f\x5f\x9e\xbc\x7c\x91\x38\x5e\xab\x76\x74\xdd\x5a\x9b\x33\x5d\x3d\x7a\x72\x7a\xf8\xfb\xf0\xe5\xe1\xf0\xd9\x67\x19\xd3\x1d\xcb\xd4\xf0\x0e\x06\x98\x91\xb5\x29\x48\xd3\x67\xd3\xe1\x8c\x6d\xb9\x92\x26\x2a\x18\xb3\x30\xf4\x05\x67\x31\x50\xe3\x9e\x51\x32\xdd\x98\x7f\xae\x38\x21\xd5\x0d\x69\x64\x41\xe6\x2b\xd4\xca\x8d\xf8\x05\xf9\x62\xd4\x31\x59\x65\x35\xba\xcd\x86\x1a\x65\x26\x2f\x7c\x1b\xf3\x75\x10\x87\x1e\x05\x01\xd3\xbd\x2c\x43\xe3\x04\x02\x38\x2a\x44\x6d\x31\x5b\xee\x64\xa6\xef\x8c\x7e\xbe\x27\x0c\xe5\xf7\x68\x34\xa1\x92\x06\x4d\x01\x07\xc0\xd9\x58\x5f\x2f\x3d\x9a\x14\x69\x1b\x4c\xc4\x39\x1a\xe3\x45\x3e\xa4\x9e\x2e\xe7\xdc\x8f\x38\xc7\x72\xb1\x09\x67\x00\xce\x25\x8d\x5e\xec\xe7\xb5\x86\x8b\x9e\x90\xc2\xf2\x6d\x74\x9b\x19\xd5\x1b\x89\x53\xa7\xb0\xb5\x9f\xfb\xd5\x5f\x2b\xb2\x6e\x9e\xc9\xfa\x06\x52\xa4\x25\xba\xf0\xa0\x83\x12\xa8\x83\x31\x75\x15\x69\x8e\xc0\x35\x32\x42\x37\x0d\x6b\x46\x28\xb3\x28\x6c\x2e\x43\xc1\x45\x1f\x97\xa5\xb0\x39\x87\x76\x55\x14\x3e\x89\xd0\x10\xb8\x8c\x18\x74\x99\x2f\x5c\x46\x08\x1e\x13\x3e\xba\x17\x20\xea\xdb\x5a\x2b\x6d\xae\xdf\xbd\x87\x9c\xe6\x95\x73\x73\x21\x39\x23\x83\x1a\x5c\x85\x06\xa4\x22\x60\x11\x75\x50\x52\xf2\x3a\x2e\x98\xcf\x2b\x4b\xd3\xe8\xb0\x2e\x42\x88\x3a\x10\x26\x3e\xf4\x81\x14\x30\xab\x70\x41\xfe\x05\xe9\x2d\x55\x71\x31\x3b\x4f\x45\x72\x96\xc8\xb3\xc0\xaf\x9e\x13\x3c\xad\xb3\x28\xb4\x05\xc6\x95\xf4\x7c\xc1\x69\x31\xf4\x8d\xf3\x2a\x33\x0e\xdb\x57\xfc\xfe\xcc\xc2\x9e\x85\xba\x68\xcc\xa4\x14\x04\x4c\xf6\x40\x48\x60\x10\x49\x41\x40\x22\x58\x4c\xf6\xd7\xe7\x78\xcb\xe3\xc3\x1f\x35\x60\xfc\xee\x2d\x04\xe2\xa2\xc7\x22\x9f\xce\x04\xfa\x40\xe2\x6e\x88\x9c\xce\x84\xba\xe0\xe3\xa2\x56\x41\xbb\x38\xca\x24\xcf\x4a\x73\xc7\x78\x69\x27\xb7\xcf\x20\x8f\xb4\xa0\x5e\x69\x6f\x29\xf2\xed\x30\xb4\x0d\xf6\xf6\x4e\x25\x91\xbc\xc3\xdd\xba\xd2\xae\x1d\x29\x9b\xb5\xbc\x5d\x42\xd6\xb6\xfd\x6c\x0a\x9c\xab\xed\x0f\x9f\x7c\x7e\xfc\xfc\xa7\xc1\x17\xbf\xe6\xbb\x78\x49\x8c\x93\x7f\x0e\x06\xdf\x7c\x7b\xfc\x7c\x6f\xf0\xf4\x70\xf0\xd7\xfe\xe0\xc9\x5e\xe5\xae\xd2\xbc\x90\x1f\xf1\xee\x7c\x98\xb0\xfa\xbf\x8f\x0a\x09\xcf\xd5\x9c\xb0\x9a\x13\x56\x73\xc2\x6a\x4e\x98\x8a\xbe\x9a\x13\x56\x73\x42\x99\x76\xe5\x9c\x50\xb8\xe8\x78\x85\x53\x42\x71\x1e\x18\xdf\xc2\xe4\x82\xcb\x6e\x07\x92\x28\x93\x20\x73\x83\x02\xf5\x42\x7b\xa9\xa2\x46\x2b\xe3\xcb\x94\x50\xc7\xbd\x9d\x44\xa9\x57\x3b\x5c\xb9\x58\xee\xde\xa9\x0f\x21\x09\xdb\xa8\x0b\x8a\x38\x9e\xd2\x01\xa3\x64\xf9\x8d\x4d\xa7\xa4\x79\xa9\x92\x47\x3d\x78\x24\x2d\x58\xac\x82\x7d\xc8\x88\x50\x5b\xdb\x8f\x6f\xaf\xd7\xaf\xee\x3c\x6c\xae\xf5\x2f\x39\x95\xd2\x04\x68\x0c\x6b\x4f\x25\x6b\x48\x0b\xd9\x3e\x0f\x9d\xd4\x61\xad\xac\xc5\x18\x35\xbb\xde\x3b\x3d\xf8\xea\xe4\xe8\xa8\x70\x8f\xe5\x94\x2a\x6d\x25\xc2\xc5\x88\x90\x43\xb3\x26\x13\xc3\x65\x0a\xc6\xb4\x66\xbd\x22\x96\x20\x0c\xca\xf6\xd3\xf5\x48\x56\x67\x9e\x23\x93\xc7\x48\xf9\x94\x9b\x11\x9d\x29\xb2\x2b\x55\xd3\xe9\xfe\xdf\xe7\xa8\x3d\x18\xbc\xf8\xfa\xdf\xdf\x7e\xac\x2e\xc4\x96\xa4\xeb\x29\x87\x85\xab\x50\xb8\x8b\xd7\xe0\x95\x8d\x99\xa2\xb7\xae\x55\x0b\x9c\x5c\x01\x2f\x5a\x4b\x83\x67\x7b\xc3\xef\x7f\x9e\x2b\x89\xc2\x85\x18\x0c\x06\xfb\x7b\x83\x3f\x0e\xca\xf9\xab\xb8\x5e\x5c\x22\x91\x28\xd9\x5d\x1f\x6f\x12\xa3\xa9\xc1\xbd\xea\xda\xcd\x0a\x62\xde\xca\x1d\x3c\x3b\x1a\x7e\xf7\x78\x78\xf0\xc3\xf0\xe9\x2f\xc7\x8f\x1e\x57\x24\xb5\x94\xb3\xf2\x77\xd6\x12\x09\x9b\xfc\xe0\x3d\x6f\x25\x64\x5f\xb3\xd3\x78\x8f\xfb\x69\xda\xac\xaf\x55\xf5\xd5\xb4\x47\x4f\x84\xc2\x42\xf1\x2e\xe6\xfe\x6a\x49\xff\xbc\xf8\xa8\xbe\x1d\x86\xf5\x96\x9b\xad\x08\x4b\xa8\x83\x2c\xfe\xcc\x2f\xe4\xec\x2d\x64\x1a\xf5\x2d\x75\x1f\x2b\xdf\xd3\x69\x10\xdb\x11\x75\x94\x16\x9f\xda\xaf\x90\x99\x38\x71\x8c\xb5\x7e\xed\xbf\x00\x00\x00\xff\xff\xb6\xe2\xf8\x09\xbc\x1a\x00\x00")

func docFrontendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docFrontendSwaggerJson,
		"doc/frontend.swagger.json",
	)
}

func docFrontendSwaggerJson() (*asset, error) {
	bytes, err := docFrontendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/frontend.swagger.json", size: 6844, mode: os.FileMode(420), modTime: time.Unix(1708603270, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/backend.swagger.json":  docBackendSwaggerJson,
	"doc/frontend.swagger.json": docFrontendSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"backend.swagger.json":  &bintree{docBackendSwaggerJson, map[string]*bintree{}},
		"frontend.swagger.json": &bintree{docFrontendSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
