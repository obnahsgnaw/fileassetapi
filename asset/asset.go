// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// doc/backend.swagger.json
// doc/frontend.swagger.json
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docBackendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xed\x6f\xdb\xc6\x19\xff\xee\xbf\xe2\xa0\xf5\x5b\xe5\x17\x25\xd9\x80\x06\x30\x30\x37\x6e\x01\xa3\x1b\x1a\x34\x4d\x31\x20\xcb\x8c\x33\x79\xb2\x58\xf3\xad\xc7\xa3\x63\xb7\x33\x90\x34\x6f\x76\x1a\xd7\xc6\x9a\xc6\x4d\xe2\x76\x55\x91\xb6\x5e\xb7\xd9\x29\xd6\xa6\x89\xed\x2c\xff\x8c\x48\x49\x9f\xf2\x2f\x0c\x3c\x52\x12\x79\x7c\x95\x28\xc5\xf2\x7a\x9f\x6c\x91\x0f\x9f\x97\x7b\xee\xb9\xfb\xdd\xc3\xe7\x8e\x1f\x8d\x00\x50\x30\x2e\xc1\xf9\x79\x84\x0b\xa7\x41\xe1\xc4\xd8\x44\xa1\xe8\x5c\x93\xd4\xb2\x56\x38\x0d\x9c\xfb\x00\x14\x88\x44\x64\xe4\xdc\x7f\x1d\x0a\x0b\x48\x15\xc1\xd4\xd9\x19\x4a\x07\x40\x41\x44\x86\x80\x25\x9d\x48\x9a\xea\x50\xbc\x5b\x41\xa0\x2c\xc9\x08\x40\xc3\x40\x04\xcc\x79\x0f\x40\x5d\x6a\x3d\xb0\x88\xb0\xe1\x11\x97\x3c\x71\x00\x14\x04\x4d\x25\x50\x20\x6d\x99\x00\x14\x54\xa8\x50\xa1\xa8\x2c\x2f\x7b\x64\x00\x14\x4c\x2c\x3b\x17\x2b\x84\xe8\xc6\xe9\xf1\x71\xe7\xe6\xa8\x80\x88\x30\x26\x68\x4a\x87\x0a\x29\x50\xa2\x74\xaa\xa6\xa2\xdf\xa3\x25\xa8\xe8\x32\xa2\x24\x94\x62\x65\x04\x80\x15\x6a\x28\x81\xf3\x46\xe1\x34\xb8\x40\x2f\x87\x44\xcf\xa8\x22\x5a\x3a\x87\xf0\xa2\x24\xa0\x0e\x73\xc6\xe4\xe6\xc1\x17\x8d\xdd\x87\x1e\xe3\x62\x34\xa3\xb7\x29\xb5\x91\xca\xea\xf2\x5a\xb3\xfa\xb4\xbe\x5b\xad\x6f\xde\x48\x66\x38\xe5\x34\x6f\x1a\xbb\x53\x63\xf6\xdd\x9b\xb5\x83\xc7\x59\x18\x4e\x6b\x97\x54\x59\x83\x62\x1a\xcf\x93\x63\xb5\x27\x9f\x34\x9e\x3d\xb3\xb7\xd7\xad\x5b\xd5\x64\x9e\x67\x34\xb5\x2c\xcd\xa7\x71\xb4\x6e\xed\xd8\x97\xaf\x34\xaf\xaf\xd7\x9f\xed\x26\xf3\x3b\xaf\x67\xd1\xb0\x34\x56\x7b\x72\xab\x76\xf8\x75\x16\x0d\xdf\x93\xd0\xa5\x34\x7e\x27\xc6\x9a\xdf\x5c\x6b\x7c\xbf\x1a\xe0\x37\x02\xc0\x45\xda\x81\x0c\xa1\x82\x14\xd4\xe9\x43\xb4\x67\xb6\x7a\x35\xed\xa5\x85\x36\xad\xa0\xa9\x86\x19\x20\x86\xba\x2e\x4b\x02\x74\x44\x8d\xbf\x6f\x68\x6a\xeb\x41\xff\x75\x4d\x20\x88\x8c\x1a\x04\x23\xa8\x74\x78\xe9\x58\x13\x4d\xa1\x4f\xbc\x20\xa9\x18\x9d\x70\x1f\x5f\x2c\x8d\x0b\xd4\x75\xfe\x70\x9c\x47\xfe\xe8\x74\x2c\x37\x15\x05\xe2\x65\xda\x6f\xa9\xf3\x6a\xcf\xab\xf6\x95\xbd\x76\x3b\x86\x5b\xb2\xf1\xfc\x8e\xf5\xe0\x2b\xb7\x1d\xad\x67\x9f\x59\x6b\xeb\x71\x0f\x6a\x3a\xc2\x54\xe3\x19\x31\xd4\x91\x66\xa7\x11\x71\xa2\xdb\x47\x8e\x91\xa1\x6b\xaa\x81\x8c\x80\x86\x00\x14\x4e\x4c\x4c\x30\x97\xc2\x5a\x4d\x01\xc3\x14\x04\x64\x18\x65\x53\x06\x2d\x4e\x63\x3e\xf6\xae\xb5\x8e\x9f\x61\x88\x19\x00\x85\x57\x30\x2a\x3b\x7c\x7e\x33\x2e\xa2\xb2\xa4\x4a\x34\xd2\xc7\x17\x4b\xae\xd2\x85\x00\xf9\x8a\xef\xd7\x4a\x31\xa8\x69\x29\x55\xd3\x77\x10\x31\xb1\x8a\x44\x70\xa9\x82\x54\x40\x2a\xc8\x51\x57\x33\xb1\x80\x80\x80\x11\x24\x48\x6c\x99\x92\xa0\x7e\x92\x0a\xa7\xf2\xa8\x20\x22\x19\xe5\x55\xe1\x54\x06\x7f\x45\xa9\xf0\x81\x89\x0c\x02\x44\x48\x20\x58\x84\xb2\x24\x42\x82\x40\x19\x4a\x32\x12\xfb\xe0\xc8\x37\x30\xd6\xb0\xf1\xf6\xdc\xfb\x48\x20\x59\xdd\x79\xaa\x27\x77\x9a\x06\xc2\x40\xd4\x90\x01\x54\x8d\x00\x68\x92\x0a\x52\x89\x17\xbb\x3d\xb6\xe7\xc9\xdc\x6a\x54\xe0\x22\x02\x3a\xc2\x8a\x64\x38\x13\x37\x20\x1a\x80\xd4\xc3\x01\xf7\xf7\xa8\x5e\xae\x1e\xe7\x68\x57\xd6\x4c\x35\xc9\xc9\x49\xc2\x5f\xeb\x52\x78\xab\x9f\x99\x3a\xed\x60\xce\x18\x29\x4b\x02\xe9\x4d\xfa\x89\x6e\x3d\xd3\x36\x5b\xd6\x84\x85\xc4\x8e\x9d\x24\xb5\x57\x9b\x89\xa6\x01\x05\xaa\xcb\x40\x52\x01\x04\xa6\x2a\x11\x40\x24\xa5\x37\xb7\xff\x36\x43\x94\x3b\x83\x3d\xc2\x00\x39\xb1\xd7\x93\x10\x11\x95\xa1\x29\x93\x54\x41\xe7\x55\xb4\xa4\x23\x81\xa4\x8a\xea\xf3\x70\x31\x12\xa1\x76\x10\x8e\x7a\xd7\x82\x28\xaa\x7d\xe7\xa2\xef\x31\x03\x09\x26\x96\xc8\x32\xf3\x28\x63\xf8\x94\xae\xd3\xe9\xf4\xc2\x45\xc6\xc6\xd7\x11\xc4\x08\xbf\xab\x2d\x20\x95\xde\x8e\x54\xb3\x75\xb5\xad\x6e\x41\x37\xe3\x11\x81\xfd\xe0\x27\xfb\xee\x23\x0f\xd4\xc5\x23\x02\x97\x2c\x37\x22\x38\x4f\x03\x92\x23\x02\x8e\x08\x38\x22\xe0\x88\x80\x23\x82\xae\xa4\x72\x44\x30\xcc\x88\x40\x87\x18\x2a\x88\x20\xcc\xe2\x02\xc6\x86\x56\x46\x43\x44\x73\xe6\x3c\xab\x32\xbb\x0e\x7f\x74\xb5\xb1\xf7\xb9\xbd\x53\xb5\x0e\x37\x58\x52\x89\x52\x7c\x60\x22\xbc\xcc\xde\x72\x1c\x2f\x61\xe4\xcc\xbf\x65\x28\x1b\x88\xb9\x4d\x96\x75\xaa\xc1\x9c\xa6\xc9\x08\xaa\x85\x68\x14\x71\xcc\xc0\x0e\xfd\xeb\xf9\x83\x26\x46\x44\x2f\x4f\x36\xea\x26\x22\xdb\xe9\x11\x5d\x33\xe2\xd1\x50\xe3\xd3\x5f\xac\x8d\xbb\x6e\xe2\xcc\xda\x7e\x64\x7d\x79\x39\x01\x13\x59\xd7\x1f\xd7\x0e\xee\xba\x98\x28\xfc\xa0\xb5\xf7\xd4\x7a\x78\xb7\x7e\x70\xcf\xba\xb9\xff\xe2\xf0\x76\xe3\xf9\xbd\xe6\xcd\xdb\xb5\xa7\x7f\xb7\x36\xf6\x6a\x07\xdf\xda\x6b\x9f\x58\xb7\x76\xdc\xa7\x12\xd0\x13\x93\xec\x9b\x7d\x13\x11\xa1\x72\x1e\x0f\x7b\x4e\xa5\x2c\xc9\x88\xe6\x95\x67\xbd\xbc\xf2\x2c\xd4\xa5\x96\x43\x16\x4b\x2d\x2b\xde\xf1\xe4\x71\xa0\xd5\x8d\x0a\x1c\x68\x71\xa0\xc5\x81\x16\x07\x5a\x1c\x68\x65\x03\x5a\x73\x9a\x18\x42\x48\x2e\x78\x8a\xba\xe3\xc3\x4e\x04\x9b\x2c\x74\x1a\xd8\x44\x48\x3b\x50\x96\x96\x48\xc3\x65\xec\xeb\xc1\x21\x44\x66\x4e\xa3\x18\x59\xdf\x58\x59\xab\x5b\x8d\xea\x4e\x52\x66\x8a\xbe\x39\x0d\x93\x31\x48\xca\xff\x1e\x76\xf6\x2c\x9c\x97\xd4\xe3\x90\x88\x6a\x29\xca\x91\x12\x47\x4a\x1c\x29\x71\xa4\x14\x2b\x9d\x23\x25\x8e\x94\x58\xb5\xbb\x46\x4a\x3a\x9c\x47\x29\x19\xa9\xb3\x70\x1e\x01\xd5\x54\xe6\x10\x2e\x02\xaf\x51\x26\x4b\xfd\xcf\x4d\x49\x2a\x41\xf3\x08\xb3\x4f\x97\x35\xac\x40\xe2\x11\xfc\xee\x54\x21\xce\x5f\x31\x06\xca\x92\x22\x91\x2c\x16\x1a\xd2\x87\xc8\x67\xdf\xc4\x71\x31\x70\x01\x2d\x5f\xd2\xb0\x98\x62\xe2\x5b\x2e\x15\x30\x10\xc4\x42\xa5\x08\x64\x69\x01\x9d\xf6\x1e\x9d\x5c\x5a\x7a\x71\x78\xbb\xf5\x43\x12\x27\x4b\x7f\x75\x98\x4f\x2e\x2d\x2d\xf5\xbf\x11\x0c\x82\x25\x75\xbe\x5b\x23\x0d\x0d\xa7\x39\xf1\x9c\x86\x09\x90\x25\x83\x78\xc6\x01\xe7\x99\xc9\x57\x61\x71\x74\xae\xf8\xaa\x50\x1c\x0d\xb5\xd0\x40\x6c\xc9\x0c\xda\x03\x45\x82\xc3\x8a\xd8\xc7\x3f\x92\xc4\x15\x3f\x6c\x77\x21\x5a\x02\x72\xff\xba\x79\xef\x61\x52\xfe\x94\x12\xb8\xf8\x3d\x2b\x72\x9f\x76\x65\x0e\x0b\x6e\x6f\x39\x5f\x73\xc7\xe7\x22\x7b\x5f\xc7\x8e\x31\x44\x72\xb5\x5b\xe1\xe8\xbd\x0b\x15\x38\x7a\xe7\xe8\x9d\xa3\x77\x8e\xde\x39\x7a\xcf\x86\xde\xa5\x34\xd8\x37\x33\x1d\x8d\x7a\x74\x48\x2a\xdd\xa5\x41\x73\x80\xd8\xff\x1b\x4c\xa4\xb9\x3b\x45\xb2\xe6\x31\xdd\x1d\x23\x09\x30\x27\xb8\xf3\x64\xd6\xfd\xf9\x07\xc9\x20\x43\x03\x76\xe2\x3a\x79\x47\x55\x9e\xa6\xe4\x40\x87\x03\x1d\x0e\x74\x62\xa5\x73\xa0\xc3\x81\x0e\xab\x76\xe4\xec\xcf\xec\xc3\xec\xcb\xfc\x9f\x0a\x43\x96\x46\x35\x2c\xd2\x0d\xb6\xa5\xd8\x69\xdf\xa4\x5b\x1b\x47\xe9\xb6\x3b\xac\x64\x2e\x2c\xab\x57\x77\x1b\xbb\x0f\xdd\xfd\x8e\xf5\xfb\xd7\xc2\x49\x0f\xc6\x41\x91\xf4\x2f\x0e\x6f\x5b\x9b\xdf\x59\xab\xf7\x6a\x87\xf7\x1b\xdf\xfc\xb3\x71\xf3\x07\xeb\xd6\x8e\x7d\xf5\xba\x75\xe3\xe7\x04\x60\x11\xd8\x8c\x39\x7b\xc6\x53\x7c\xd8\x41\x85\xa7\x27\x47\x14\x1c\x51\x70\x44\xc1\x11\x45\xac\x74\x8e\x28\x38\xa2\x60\xd5\x3e\x56\x25\x62\xbe\xa9\xae\x6f\x45\x60\xc1\xf3\x17\xfa\x02\x9e\xfa\x9b\x3c\xf1\x50\x14\x53\x9a\x9f\x94\x3f\x69\x15\xd8\x3b\x80\xa8\xa7\xca\xfc\xce\x83\x7d\xa9\xcc\x0f\xa2\xaa\xe3\x5c\x97\xef\xfa\x82\x57\xe5\x73\xc8\x05\x38\xe4\xe2\x90\x8b\x43\x2e\x0e\xb9\x5e\x46\xad\x19\xd6\x22\x4a\x26\x58\x13\x63\xa8\xb2\x55\xeb\x24\xbc\xb8\xea\xad\xf0\xc8\x4c\x7d\xc5\x16\x41\x91\x5b\xd7\xc1\x54\x8a\x29\x9a\x68\xca\x69\xd5\x7e\xd1\x44\x47\xd4\xfa\x0a\x5c\x3a\x27\x7d\x98\xa6\xb2\x11\x41\x32\xac\xd5\x7a\x82\xa6\x12\xa4\x92\x77\x1d\x21\xc9\x56\x79\x94\xb3\x24\x82\xf4\x88\xdc\x81\x96\x08\x52\xe9\x01\x81\xc9\xaa\xc7\xd2\x1d\x91\xde\x84\xc8\x29\x1a\x47\x50\x0c\x69\x10\xeb\x30\xb5\x12\xd2\x21\x01\xaa\xa9\x0c\x45\x4c\x74\x56\x86\xc7\x7d\x01\xdb\x39\x1c\x33\xd3\xea\xb5\xbe\xb6\x6a\x6f\xff\xcb\xda\xf8\x25\x61\xd1\x1a\x3e\x74\x2f\xf2\x29\x66\x1d\xea\x3f\xf9\x72\xf6\x3d\x4f\xab\xe1\x5e\x85\x2e\x96\x3c\x3d\xf9\x4a\x93\xaf\x34\xf9\x4a\x93\xaf\x34\x63\xa5\xf3\x95\x66\xa2\x16\xbf\xce\x95\x66\x14\x5e\x08\x9c\xff\xdc\x17\xb8\xd0\x2d\x1e\x90\xd0\xa5\xee\xd3\xd9\xee\x79\xc5\x3d\xa4\xb3\xfd\x0f\xf6\x25\x9d\xed\x3b\x5f\x79\xd6\xf9\x7f\xf8\x73\xd9\x8b\x25\x4f\x4f\x8e\x22\x38\x8a\xe0\x28\x82\xa3\x88\x58\xe9\x1c\x45\x70\x14\xc1\xaa\xfd\xab\xc8\x57\x1f\xbf\x1c\x2f\xfd\x9b\xac\x6f\x14\x09\x4f\x25\xf6\x29\xef\xe6\xff\xcc\x46\x5f\x60\x74\x9f\xb3\x6e\x1e\xca\xce\xbc\xeb\xe6\x18\xc0\x6c\xe3\xb8\xe0\x6c\x83\x03\x6d\x0e\xb4\x39\xd0\xe6\x40\x3b\x56\x3a\x07\xda\x1c\x68\xb3\x6a\x73\xa0\x3d\xb4\x40\xdb\xc8\x80\xb4\x43\x34\xf9\xdf\x1b\x43\x8c\x61\xb8\xda\x9a\x20\x85\x05\x3d\x51\x66\x16\xd9\xfb\x3e\xa1\x17\x98\x7b\xa0\x65\x02\x73\xfd\x62\xb0\x07\x33\x9a\x08\x9a\x2c\x23\xc1\x69\x83\x37\xdb\x88\x5a\x31\x65\x22\xf1\xd5\xc1\x30\xae\x0e\xda\x1f\x88\xf4\x8d\x58\xed\x7e\x54\xe8\xf2\xfc\x55\xdf\xaa\x22\xe6\x64\x1f\xe6\x44\x1f\xdf\x30\xe7\x0d\x48\x0c\x6e\x4f\xe8\xbe\x71\x43\x5a\xe4\x28\x6a\x4a\x62\x1c\xeb\x28\x8f\x87\xfc\x9d\x24\xd8\xe1\x1d\x29\xd4\x1b\xb1\x7a\x37\xc9\x63\x10\xc9\xdc\x0b\x93\x5e\x59\xd3\xc7\x23\x19\x3b\x51\x35\xa8\xa6\x72\x78\x47\x0a\x15\x34\x53\x8d\x75\x7e\x6e\xb1\x2e\xf7\x8e\xe0\x11\x46\x81\xe8\x51\x30\x62\x92\x64\x0a\x14\xc3\x73\x12\x9b\x5e\x61\xc6\xa8\xa0\x26\x6e\x28\xb6\x16\xe8\xdd\x1e\xfa\x9f\x23\xd8\x82\x2f\xda\x40\x97\x5d\xc7\x79\x3a\xdc\x96\xe9\xb6\xc4\x6e\x94\xc8\x61\xc9\x40\x43\xcc\x55\x78\x26\x76\xe4\xc8\xc2\xde\x99\xf9\x68\x0d\x99\xcb\x0c\xc4\x8d\x15\x39\xc3\x99\x7e\x8a\x38\x3e\xa6\x13\x1c\x1e\x86\x13\x31\x60\x22\x2b\x62\x0a\x75\x17\xd7\x70\x13\x07\x27\xeb\xce\xc7\x96\xad\xef\x3e\xb6\xbf\xda\xb6\x56\x6f\xd4\xd7\x6e\xd6\x0e\xef\xbb\x75\x5c\xd6\xc3\xfb\xb5\x27\x3f\x00\x7b\xed\x72\xed\xe0\x5b\xfb\x8b\x3d\xf7\x77\xf7\x31\xec\x6f\x93\x60\xbc\xb5\x3f\x53\x96\xa3\xfb\xb9\x1f\xa1\x89\x69\xd9\xd6\xf7\x61\x92\x1a\x27\xf0\x85\x9a\x94\xa0\x0a\xed\x74\xe3\xd3\xed\xcb\x9b\x6e\x09\xc4\x6c\xa2\xb4\x3b\xe6\x1e\x83\xd8\xe0\x0f\xa5\x2c\x5f\x5a\x80\x32\x20\x3f\xe7\xec\x98\x14\x6b\xbe\xf3\x08\x72\xf4\x5d\x2f\x9b\x98\x27\xec\x3c\x16\x40\xc3\x5e\x4e\x30\xda\x2f\x74\xfd\x9f\x67\x54\xa6\xbc\x81\x82\x0c\x03\xce\xa3\xf4\xf8\x7e\x43\x85\x73\x32\x3a\x47\x20\x89\x6c\x20\x46\x62\x01\xa9\xa6\x12\xf4\xc9\xb4\x64\x38\x1c\x02\x18\xc5\x65\x1a\xb8\x34\xed\x25\x42\x5a\xbe\x6a\x73\xec\x64\x48\xc2\xac\x7c\x03\xf6\xe6\x5e\xfd\xce\x0e\xa8\x7f\x77\xa5\x7e\x67\xa7\xc0\xda\xe0\xb4\x99\x97\xea\xc8\xe1\x64\x41\x13\x63\x43\x39\xf7\x10\xd2\xea\x85\x6e\x82\x07\x50\x59\x01\x7a\x1d\x12\x82\x30\xa5\xfd\xcb\x85\x89\xd1\xd7\x2e\x7e\x54\x2a\xae\xbc\x12\x33\xec\x78\xde\xed\xbd\x9b\x30\xea\xc4\x77\x97\xb0\x2b\x9a\x77\xee\x35\xf6\xf6\x22\x7d\x60\x70\x27\xf4\xd5\x09\xec\xb8\xd0\xc7\x01\x3b\xf2\xf8\xdb\xe4\x6c\x62\x38\x99\x98\x38\xc6\x07\xad\x33\x62\x90\x98\xdb\x9b\x9a\x9f\xfd\xb7\x8b\xbe\x07\x5c\x64\x16\xdd\x11\xdf\x94\x64\x44\x0f\x22\xcc\xd3\x0b\x07\x88\x25\xe2\xa0\x44\x7e\x78\xe4\xbe\x06\x6d\x56\x9f\xd6\x1f\xec\x0e\x08\xae\x38\xa8\xf1\xcb\xad\xae\x01\x58\x96\x15\x9e\x81\xf0\xa0\x56\x2a\xde\xd1\x4d\x83\x01\x59\xf5\xdd\x6a\x7d\xf3\x86\xb5\xf7\xb4\xf1\x63\xb5\xeb\x95\x50\x06\xfe\x81\x37\xe1\xd1\x43\x83\x37\xdb\x32\x32\x62\x63\xd9\x37\xe3\x27\x09\x76\xa7\xdc\xfa\xad\xc7\xf6\xe5\x2b\x31\x19\x14\xf7\x75\xef\x54\x57\xcd\xd7\x89\x15\x11\x12\x34\x4a\x24\x25\x45\x8d\xd5\x07\xd6\xc1\xbe\xbd\xf5\xb8\xb9\xf5\x53\xa6\x31\xc2\xf5\x76\xe3\xe7\x6b\xf6\xfe\x26\x3b\x38\xcc\xa8\xe4\xed\x16\xe7\x23\x19\x1c\x4e\x9e\x48\x34\x76\x66\x7a\x20\x01\x60\x6d\xae\xd7\xbf\x7f\x94\xa9\xf5\x24\x91\xae\xe9\x81\xf5\xd9\xba\xb5\x7f\x87\x6d\xbf\x88\x73\x43\x73\x34\x24\x8a\xc4\x9e\xe0\x65\x4e\x6c\x9d\x0e\x91\x75\x5a\x73\xc2\x82\xa2\xd0\x50\x64\xc4\x20\xec\xd6\x07\xa1\xf2\x2f\xfd\xbd\x4f\x3c\x78\x07\xed\x1d\x55\x93\x9d\xa3\xfd\xad\xdb\x56\xbb\xfe\x9f\xe6\x9d\x5d\xeb\xdf\x5b\xf5\x1f\x0f\xac\xaf\x3e\x71\x8f\xd6\x7d\x71\x78\xdb\x4d\xc4\xd4\x9e\xec\xd7\xff\xb1\x6f\xad\xde\xb3\x36\x7e\xb0\xb7\xd7\xda\xc4\xf6\xe6\x76\xfd\xa7\x6f\xa2\x43\xc2\xd0\x30\x39\xa3\xc9\xa6\x12\xdf\x12\x11\x76\x15\xa0\x28\x52\x4b\xa0\x7c\x36\xba\x95\x41\x8e\x65\xad\xb5\xb1\x67\x7f\xfa\x37\x6b\x7f\xc3\x5a\xdd\x2a\x2e\xa0\xe5\x49\x6b\x75\xeb\xc5\xe1\xed\x45\x28\x9b\x68\xd2\xda\xf8\xd8\xfe\xfc\xd1\x02\x5a\x8e\xb6\xc7\x3d\x9c\x78\x08\x2d\x6a\x3c\xbf\x69\x1f\x3c\x74\x3d\xe6\xd8\x05\x58\xc3\x5c\xcd\xdb\x04\x8d\xea\x4e\xfd\xfe\xb5\xa0\x9d\x29\xa1\xf1\x47\x44\x60\x9e\xc0\x20\x1a\x81\x83\x7b\x83\xf0\x4e\xab\xe4\x81\x8a\x01\xaa\xa9\x18\x31\x10\x2e\x61\x39\x90\x5b\x8b\x33\x26\xc6\x48\x25\xc0\x11\x12\x0b\x94\xdc\xaf\xe5\xbc\x14\x15\xe8\xae\xfd\x68\x58\xc0\x0e\x74\x20\x69\x38\x61\x86\xc7\x64\x28\xe0\x74\xae\xe6\xf5\xf5\xfa\xb3\xdd\x22\xd5\x62\xb2\x64\x6f\x3d\xb6\xb7\xd7\xdc\x6b\x2f\x0e\xbd\xea\xbe\xc6\xd5\x67\xb5\x27\xfb\xaa\x14\xf5\xd2\x20\x22\xb7\xb0\x7a\xa3\x59\xfd\xd9\xba\x7e\xd5\xfe\xfc\x91\xbd\xbe\xcb\xce\x79\xa1\x0f\xfa\xe5\x79\x77\x10\xec\xe8\x99\x1a\x86\x06\x47\x8c\xb7\x8d\x58\x67\x0f\x7a\x16\xe8\x2c\xb3\xfc\x43\x49\x6a\xc4\x07\x26\x8f\x81\x60\xb0\x0c\x70\xe8\xe8\x51\xd6\x02\x5a\x4e\x82\x59\xec\x66\xeb\x1c\x0d\x15\xde\xf5\xde\xad\x59\x9d\x2d\xed\xa9\xde\x65\xb7\x77\x0d\xf3\xfb\xc2\x88\x22\xd9\x7c\xea\x0e\xcf\xa4\x1d\xff\xde\x8b\xf6\xb9\xc9\x3f\x9b\x13\x13\x27\x11\x48\x6a\xa4\x76\x8d\x46\xab\x3e\x64\x3a\xaa\x56\xa3\x55\x16\x12\x6a\x36\xa8\x4b\x6f\xa1\xce\xf0\xd3\x2e\xb0\xf9\xd3\xe8\x94\xae\x8f\xce\xf8\x32\xbc\x6e\xf5\x4c\x05\x41\x11\xe1\x60\x18\x04\x4b\x4b\x32\x8b\x98\x32\x49\x45\xc3\xd2\x87\xb4\x5c\x35\x51\x8e\x63\xe3\xc8\xca\xc8\xff\x02\x00\x00\xff\xff\x84\x12\xcb\x14\xa9\x95\x00\x00")

func docBackendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docBackendSwaggerJson,
		"doc/backend.swagger.json",
	)
}

func docBackendSwaggerJson() (*asset, error) {
	bytes, err := docBackendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/backend.swagger.json", size: 38313, mode: os.FileMode(420), modTime: time.Unix(1708651631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docFrontendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6b\x1b\x47\x10\x7f\xd7\xa7\x18\xae\x79\xb4\x22\xcb\x71\x0b\xf1\x53\x5d\xd2\x82\x68\x21\x25\x49\x4b\x21\xb8\x61\xb3\x37\x27\x6d\x72\xb7\x7b\xdd\x9d\x53\xac\x06\x41\xf2\x52\x9a\x80\x69\xc0\x7e\xe8\x9f\x50\x30\x84\xb6\x94\x12\xf7\xa9\x7f\x69\xfb\x65\x2a\xcb\xfe\x16\xe5\x56\x77\xba\x3f\x3a\xc9\xb2\xe4\x40\x1f\xf4\xa8\xdb\xd9\xf9\xfd\x66\x7e\x73\x3b\x73\xab\x87\x35\x00\xc7\x3c\x60\xed\x36\x6a\x67\x0b\x9c\x8d\xcb\xeb\xce\x5a\xfc\x4c\x48\x4f\x39\x5b\x10\xaf\x03\x38\x24\xc8\xc7\x78\xfd\x1d\xad\x24\xa1\x74\x61\xfb\xfd\x96\x35\x04\x70\x5c\x34\x5c\x8b\x90\x84\x92\xb1\xc9\xad\x0e\x82\x27\x7c\x04\x66\x0c\x12\x78\xe9\x0e\x16\x8a\x74\x47\x17\xb5\x49\xac\x9b\x09\x20\x80\xc3\x95\x24\xc6\x69\x8c\x0a\xe0\x48\x16\x58\x58\xf4\xfc\x5e\x62\x06\xe0\x44\xda\x8f\x1f\x76\x88\x42\xb3\xd5\x68\xc4\x8b\x75\x8e\xc4\x2f\x73\x15\x64\x56\x18\x30\x61\xed\xa4\x92\xf8\x26\xee\xb2\x20\xf4\xd1\x9a\x58\x8b\x7e\x0d\xa0\x6f\x43\x25\xd6\x36\xce\x16\xdc\xb6\x8f\x27\xa0\x5b\xd2\xc5\xdd\x9b\xa8\xbb\x82\x63\xe6\xbc\x14\xf3\xe9\x9f\x5f\x9e\xbc\x7c\x91\x38\x5e\xab\x76\x74\xdd\x5a\x9b\x33\x5d\x3d\x7a\x72\x7a\xf8\xfb\xf0\xe5\xe1\xf0\xd9\x67\x19\xd3\x1d\xcb\xd4\xf0\x0e\x06\x98\x91\xb5\x29\x48\xd3\x67\xd3\xe1\x8c\x6d\xb9\x92\x26\x2a\x18\xb3\x30\xf4\x05\x67\x31\x50\xe3\x9e\x51\x32\xdd\x98\x7f\xae\x38\x21\xd5\x0d\x69\x64\x41\xe6\x2b\xd4\xca\x8d\xf8\x05\xf9\x62\xd4\x31\x59\x65\x35\xba\xcd\x86\x1a\x65\x26\x2f\x7c\x1b\xf3\x75\x10\x87\x1e\x05\x01\xd3\xbd\x2c\x43\xe3\x04\x02\x38\x2a\x44\x6d\x31\x5b\xee\x64\xa6\xef\x8c\x7e\xbe\x27\x0c\xe5\xf7\x68\x34\xa1\x92\x06\x4d\x01\x07\xc0\xd9\x58\x5f\x2f\x3d\x9a\x14\x69\x1b\x4c\xc4\x39\x1a\xe3\x45\x3e\xa4\x9e\x2e\xe7\xdc\x8f\x38\xc7\x72\xb1\x09\x67\x00\xce\x25\x8d\x5e\xec\xe7\xb5\x86\x8b\x9e\x90\xc2\xf2\x6d\x74\x9b\x19\xd5\x1b\x89\x53\xa7\xb0\xb5\x9f\xfb\xd5\x5f\x2b\xb2\x6e\x9e\xc9\xfa\x06\x52\xa4\x25\xba\xf0\xa0\x83\x12\xa8\x83\x31\x75\x15\x69\x8e\xc0\x35\x32\x42\x37\x0d\x6b\x46\x28\xb3\x28\x6c\x2e\x43\xc1\x45\x1f\x97\xa5\xb0\x39\x87\x76\x55\x14\x3e\x89\xd0\x10\xb8\x8c\x18\x74\x99\x2f\x5c\x46\x08\x1e\x13\x3e\xba\x17\x20\xea\xdb\x5a\x2b\x6d\xae\xdf\xbd\x87\x9c\xe6\x95\x73\x73\x21\x39\x23\x83\x1a\x5c\x85\x06\xa4\x22\x60\x11\x75\x50\x52\xf2\x3a\x2e\x98\xcf\x2b\x4b\xd3\xe8\xb0\x2e\x42\x88\x3a\x10\x26\x3e\xf4\x81\x14\x30\xab\x70\x41\xfe\x05\xe9\x2d\x55\x71\x31\x3b\x4f\x45\x72\x96\xc8\xb3\xc0\xaf\x9e\x13\x3c\xad\xb3\x28\xb4\x05\xc6\x95\xf4\x7c\xc1\x69\x31\xf4\x8d\xf3\x2a\x33\x0e\xdb\x57\xfc\xfe\xcc\xc2\x9e\x85\xba\x68\xcc\xa4\x14\x04\x4c\xf6\x40\x48\x60\x10\x49\x41\x40\x22\x58\x4c\xf6\xd7\xe7\x78\xcb\xe3\xc3\x1f\x35\x60\xfc\xee\x2d\x04\xe2\xa2\xc7\x22\x9f\xce\x04\xfa\x40\xe2\x6e\x88\x9c\xce\x84\xba\xe0\xe3\xa2\x56\x41\xbb\x38\xca\x24\xcf\x4a\x73\xc7\x78\x69\x27\xb7\xcf\x20\x8f\xb4\xa0\x5e\x69\x6f\x29\xf2\xed\x30\xb4\x0d\xf6\xf6\x4e\x25\x91\xbc\xc3\xdd\xba\xd2\xae\x1d\x29\x9b\xb5\xbc\x5d\x42\xd6\xb6\xfd\x6c\x0a\x9c\xab\xed\x0f\x9f\x7c\x7e\xfc\xfc\xa7\xc1\x17\xbf\xe6\xbb\x78\x49\x8c\x93\x7f\x0e\x06\xdf\x7c\x7b\xfc\x7c\x6f\xf0\xf4\x70\xf0\xd7\xfe\xe0\xc9\x5e\xe5\xae\xd2\xbc\x90\x1f\xf1\xee\x7c\x98\xb0\xfa\xbf\x8f\x0a\x09\xcf\xd5\x9c\xb0\x9a\x13\x56\x73\xc2\x6a\x4e\x98\x8a\xbe\x9a\x13\x56\x73\x42\x99\x76\xe5\x9c\x50\xb8\xe8\x78\x85\x53\x42\x71\x1e\x18\xdf\xc2\xe4\x82\xcb\x6e\x07\x92\x28\x93\x20\x73\x83\x02\xf5\x42\x7b\xa9\xa2\x46\x2b\xe3\xcb\x94\x50\xc7\xbd\x9d\x44\xa9\x57\x3b\x5c\xb9\x58\xee\xde\xa9\x0f\x21\x09\xdb\xa8\x0b\x8a\x38\x9e\xd2\x01\xa3\x64\xf9\x8d\x4d\xa7\xa4\x79\xa9\x92\x47\x3d\x78\x24\x2d\x58\xac\x82\x7d\xc8\x88\x50\x5b\xdb\x8f\x6f\xaf\xd7\xaf\xee\x3c\x6c\xae\xf5\x2f\x39\x95\xd2\x04\x68\x0c\x6b\x4f\x25\x6b\x48\x0b\xd9\x3e\x0f\x9d\xd4\x61\xad\xac\xc5\x18\x35\xbb\xde\x3b\x3d\xf8\xea\xe4\xe8\xa8\x70\x8f\xe5\x94\x2a\x6d\x25\xc2\xc5\x88\x90\x43\xb3\x26\x13\xc3\x65\x0a\xc6\xb4\x66\xbd\x22\x96\x20\x0c\xca\xf6\xd3\xf5\x48\x56\x67\x9e\x23\x93\xc7\x48\xf9\x94\x9b\x11\x9d\x29\xb2\x2b\x55\xd3\xe9\xfe\xdf\xe7\xa8\x3d\x18\xbc\xf8\xfa\xdf\xdf\x7e\xac\x2e\xc4\x96\xa4\xeb\x29\x87\x85\xab\x50\xb8\x8b\xd7\xe0\x95\x8d\x99\xa2\xb7\xae\x55\x0b\x9c\x5c\x01\x2f\x5a\x4b\x83\x67\x7b\xc3\xef\x7f\x9e\x2b\x89\xc2\x85\x18\x0c\x06\xfb\x7b\x83\x3f\x0e\xca\xf9\xab\xb8\x5e\x5c\x22\x91\x28\xd9\x5d\x1f\x6f\x12\xa3\xa9\xc1\xbd\xea\xda\xcd\x0a\x62\xde\xca\x1d\x3c\x3b\x1a\x7e\xf7\x78\x78\xf0\xc3\xf0\xe9\x2f\xc7\x8f\x1e\x57\x24\xb5\x94\xb3\xf2\x77\xd6\x12\x09\x9b\xfc\xe0\x3d\x6f\x25\x64\x5f\xb3\xd3\x78\x8f\xfb\x69\xda\xac\xaf\x55\xf5\xd5\xb4\x47\x4f\x84\xc2\x42\xf1\x2e\xe6\xfe\x6a\x49\xff\xbc\xf8\xa8\xbe\x1d\x86\xf5\x96\x9b\xad\x08\x4b\xa8\x83\x2c\xfe\xcc\x2f\xe4\xec\x2d\x64\x1a\xf5\x2d\x75\x1f\x2b\xdf\xd3\x69\x10\xdb\x11\x75\x94\x16\x9f\xda\xaf\x90\x99\x38\x71\x8c\xb5\x7e\xed\xbf\x00\x00\x00\xff\xff\xb6\xe2\xf8\x09\xbc\x1a\x00\x00")

func docFrontendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docFrontendSwaggerJson,
		"doc/frontend.swagger.json",
	)
}

func docFrontendSwaggerJson() (*asset, error) {
	bytes, err := docFrontendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/frontend.swagger.json", size: 6844, mode: os.FileMode(420), modTime: time.Unix(1708651631, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/backend.swagger.json":  docBackendSwaggerJson,
	"doc/frontend.swagger.json": docFrontendSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"backend.swagger.json":  &bintree{docBackendSwaggerJson, map[string]*bintree{}},
		"frontend.swagger.json": &bintree{docFrontendSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
