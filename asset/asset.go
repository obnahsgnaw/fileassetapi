// Code generated for package asset by go-bindata DO NOT EDIT. (@generated)
// sources:
// doc/backend.swagger.json
// doc/frontend.swagger.json
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docBackendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xeb\x6f\xdc\xc6\x11\xff\xae\xbf\x62\x71\xcd\xb7\xe8\x69\xbb\x05\x62\x40\x40\x15\x2b\x01\x84\xb4\x88\x11\xc7\x41\x01\xd7\x15\x56\xe4\x48\x62\xc4\x57\x96\x4b\xf9\x94\x54\x80\x1d\xbf\x24\xc7\x8a\x84\xc6\xb1\x62\x5b\x49\xa3\xc0\x49\xd4\xb4\x95\x1c\x34\x71\x6c\x49\xae\xff\x99\xe3\x3d\x3e\xf9\x5f\x28\xb8\xe4\xdd\x91\x7b\x7c\xdd\xf1\xce\x3a\x35\xfb\xc9\xd6\x71\x38\x8f\x9d\xd9\xd9\x1f\x67\x87\xcb\x8f\x06\x10\x2a\x58\x97\xf0\xdc\x1c\x90\xc2\x69\x54\x38\x31\x3c\x5a\x18\x74\x7f\x53\xf4\x59\xa3\x70\x1a\xb9\xd7\x11\x2a\x50\x85\xaa\xe0\x5e\x7f\x1d\x4b\x0b\xa0\xcb\x68\xe2\xec\x14\xa3\x43\xa8\x20\x83\x25\x11\xc5\xa4\x8a\xa1\xbb\x14\xef\xce\x03\x9a\x55\x54\x40\xd8\xb2\x80\xa2\x19\xff\x06\x6c\x2a\xf5\x1b\x16\x81\x58\x3e\xf1\x98\x2f\x0e\xa1\x82\x64\xe8\x14\x4b\xb4\x21\x13\xa1\x82\x8e\x35\x26\x14\x66\xd5\x25\x9f\x0c\xa1\x82\x4d\x54\xf7\xc7\x79\x4a\x4d\xeb\xf4\xc8\x88\x7b\x71\x48\x02\x2a\x0d\x4b\x86\xd6\xa4\x02\x0d\x2b\x8c\x4e\x37\x74\xf8\x3d\x14\xb1\x66\xaa\xc0\x48\x18\xc5\xf2\x00\x42\xcb\xcc\x50\x8a\xe7\xac\xc2\x69\x74\x81\xfd\xdc\x22\x7a\x4a\x97\xa1\x78\x0e\xc8\xa2\x22\x41\x93\x39\x67\x72\xed\xe0\x8b\xea\xee\x43\x9f\xf1\x60\x34\xa3\xb7\x19\xb5\x95\xca\xea\xf2\x6a\x6d\xfb\x69\x65\x77\xbb\xb2\x71\x23\x99\xe1\x84\x3b\xbc\x69\xec\x4e\x0d\x97\xef\xde\x2c\x1d\x3c\xce\xc2\x70\xd2\xb8\xa4\xab\x06\x96\xd3\x78\x9e\x1c\x2e\x3d\xf9\xa4\xfa\xec\x59\x79\x6b\xcd\xb9\xb5\x9d\xcc\xf3\x8c\xa1\xcf\x2a\x73\x69\x1c\x9d\x5b\x3b\xe5\xcb\x57\x6a\xd7\xd7\x2a\xcf\x76\x93\xf9\x9d\x37\xb3\x68\x38\x36\x5c\x7a\x72\xab\x74\xf8\x75\x16\x0d\xdf\x53\xe0\x52\x1a\xbf\x13\xc3\xb5\x6f\xae\x55\xbf\x5f\x09\xf1\x1b\x40\xe8\x22\x0b\x20\x4b\x9a\x07\x0d\x9a\x31\xc4\x22\xb3\x1e\xd5\x2c\x4a\x0b\x0d\x5a\xc9\xd0\x2d\x3b\x44\x8c\x4d\x53\x55\x24\xec\x8a\x1a\x79\xdf\x32\xf4\xfa\x8d\xc1\xdf\x0d\x89\x02\x1d\xb2\x28\x01\xac\x35\x79\x99\xc4\x90\x6d\xa9\x4b\xbc\x30\x9d\xb7\x9a\xd3\x7d\x64\x71\x6c\x44\x62\xae\x0b\x4e\xc7\x39\x08\xce\x4e\xd7\x72\x5b\xd3\x30\x59\x62\x71\xcb\x9c\x57\x7a\xbe\x5d\xbe\xb2\xd7\x18\xc7\xd6\x91\xac\x3e\xbf\xe3\x3c\xf8\xca\x1b\x47\xe7\xd9\x67\xce\xea\x5a\xdc\x8d\x86\x09\x84\x69\x3c\x25\xb7\x04\xd2\xf4\x24\x50\x77\x76\x07\xc8\x09\x58\xa6\xa1\x5b\x60\x85\x34\x44\xa8\x70\x62\x74\x94\xfb\xa9\x55\xab\x09\x64\xd9\x92\x04\x96\x35\x6b\xab\xa8\xce\x69\x38\xc0\xde\xb3\xd6\xf5\x33\x6e\x61\x86\x50\xe1\x15\x02\xb3\x2e\x9f\xdf\x8c\xc8\x30\xab\xe8\x0a\x9b\xe9\x23\x8b\x63\x9e\xd2\x85\x10\xf9\x72\xe0\xaf\xe5\xc1\xb0\xa6\x63\xa9\x9a\xbe\x03\xd4\x26\x3a\xc8\xe8\xd2\x3c\xe8\x88\xce\x83\xab\xae\x61\x13\x09\x90\x44\x00\x53\x90\xeb\xa6\x24\xa8\x9f\xa4\xc2\xa9\x3c\x2a\xc8\xa0\x42\x5e\x15\x4e\x65\xf0\x57\x94\x0a\x1f\xd8\x60\x51\x24\x63\x8a\xd1\x22\x56\x15\x19\x53\x40\xb3\x58\x51\x41\xee\x82\x23\xdf\x20\xc4\x20\xd6\xdb\x33\xef\x83\x44\xb3\xba\xf3\x54\x47\xee\xb4\x2d\x20\x48\x36\xc0\x42\xba\x41\x11\xb6\xe9\x3c\xe8\xd4\x9f\xbb\x1d\x8e\xe7\xc9\xdc\x6a\xcc\xe3\x45\x40\x26\x10\x4d\xb1\xdc\x85\x1b\x51\x03\x61\xe6\xe1\x90\xfb\x3b\x54\x2f\x57\xc4\xb9\xda\xcd\x1a\xb6\x9e\xe4\xe4\x24\xe1\xaf\xb5\x29\xbc\x1e\x67\xb6\xc9\x02\xcc\xcd\x91\xaa\x22\xd1\xce\xa4\x9f\x68\xd7\x33\x0d\xb3\x55\x43\x5a\x48\x0c\xec\x24\xa9\x9d\xda\x4c\x0d\x03\x69\x58\x5f\x42\x8a\x8e\x30\xb2\x75\x85\x22\xaa\x68\x9d\xb9\xfd\xb7\x19\x66\xb9\x9b\xec\x81\x20\x70\xe7\x5e\x47\x42\x64\x98\xc5\xb6\x4a\x53\x05\x9d\xd7\xa1\x68\x82\x44\x53\x45\x75\x39\x5d\x0c\x44\xa8\x1d\x86\xa3\xfe\x6f\x61\x14\xd5\xb8\x72\x31\x70\x9b\x05\x92\x4d\x14\xba\xc4\xdd\xca\x19\x3e\x61\x9a\x6c\x39\xbd\x70\x91\xb3\xf1\x75\xc0\x04\xc8\xbb\xc6\x02\xe8\xec\x72\xa4\x9a\xf5\x5f\x1b\xea\x16\x4c\x3b\x1e\x11\x94\x1f\xfc\x54\xbe\xfb\xc8\x07\x75\xf1\x88\xc0\x23\xcb\x8d\x08\xce\xb3\x09\x29\x10\x81\x40\x04\x02\x11\x08\x44\x20\x10\x41\x5b\x52\x05\x22\xe8\x67\x44\x60\x62\x82\x35\xa0\x40\x78\x5c\xc0\xd9\x50\xaf\x68\xc8\x30\x63\xcf\xf1\x2a\xf3\xcf\xe1\x8f\xae\x56\xf7\x3e\x2f\xef\x6c\x3b\x87\xeb\x3c\xa9\xc2\x28\x3e\xb0\x81\x2c\xf1\x97\x5c\xc7\x2b\x04\xdc\xf5\x77\x16\xab\x16\x70\x97\xe9\x92\xc9\x34\x98\x31\x0c\x15\xb0\x5e\x88\x46\x11\xc7\x0c\xec\xb0\x7f\x7d\x7f\xb0\xc2\x88\xec\xd7\xc9\x86\xbc\x42\x64\xa3\x3c\x62\x1a\x56\x3c\x1a\xaa\x7e\xfa\x8b\xb3\x7e\xd7\x2b\x9c\x39\x5b\x8f\x9c\x2f\x2f\x27\x60\x22\xe7\xfa\xe3\xd2\xc1\x5d\x0f\x13\xb5\xde\xe8\xec\x3d\x75\x1e\xde\xad\x1c\xdc\x73\x6e\xee\xbf\x38\xbc\x5d\x7d\x7e\xaf\x76\xf3\x76\xe9\xe9\xdf\x9d\xf5\xbd\xd2\xc1\xb7\xe5\xd5\x4f\x9c\x5b\x3b\xde\x5d\x09\xe8\x89\x2b\xf6\x4d\xbf\x09\x54\x9a\x3f\x4f\xfa\xbd\xa6\x32\xab\xa8\xc0\xea\xca\xd3\x7e\x5d\x79\x1a\x9b\x4a\xdd\x21\x8b\x63\x75\x2b\xde\xf1\xe5\x09\xa0\xd5\x8e\x0a\x02\x68\x09\xa0\x25\x80\x96\x00\x5a\x02\x68\x65\x03\x5a\x33\x86\xdc\x82\x90\x3c\xf0\x14\x75\x25\x80\x9d\x28\xb1\x79\xe8\xd4\xb3\x85\x90\x05\x50\x96\x91\x48\xc3\x65\xfc\xf6\x60\x1f\x22\x33\x77\x50\xac\xac\x3b\x56\xce\xca\x66\x75\x7b\x27\xa9\x32\xc5\x76\x4e\x5b\xc9\x38\x24\x15\xdc\x87\x9d\x3e\x8b\xe7\x14\xfd\x38\x14\xa2\xea\x8a\x0a\xa4\x24\x90\x92\x40\x4a\x02\x29\xc5\x4a\x17\x48\x49\x20\x25\x5e\xed\xb6\x91\x92\x89\xe7\x20\xa5\x22\x75\x16\xcf\x01\xd2\x6d\x6d\x06\xc8\x20\xf2\x07\x65\x7c\xac\xfb\xb5\x29\x45\xa7\x30\x07\x84\xbf\x7b\xd6\x20\x1a\xa6\x3e\xc1\xef\x4e\x15\xe2\xfc\x15\x63\xa0\xaa\x68\x0a\xcd\x62\xa1\xa5\x7c\x08\x01\xfb\x46\x8f\x8b\x81\x0b\xb0\x74\xc9\x20\x72\x8a\x89\x6f\x79\x54\xc8\x02\x4c\xa4\xf9\x41\xa4\x2a\x0b\x70\xda\xbf\x75\xbc\x58\x7c\x71\x78\xbb\xfe\x87\x22\x8f\x8f\xfd\xd5\x65\x3e\x5e\x2c\x16\xbb\x3f\x08\x16\x25\x8a\x3e\xd7\xae\x91\x96\x41\xd2\x9c\x78\xce\x20\x14\xa9\x8a\x45\x7d\xe3\x90\x7b\xcf\xf8\xab\x78\x70\x68\x66\xf0\x55\x69\x70\xa8\x65\x84\x7a\x62\x4b\x66\xd0\x1e\x6a\x12\xec\x57\xc4\x3e\xf2\x91\x22\x2f\x07\x61\xbb\x07\xd1\x12\x90\xfb\xd7\xb5\x7b\x0f\x93\xea\xa7\x8c\xc0\xc3\xef\x59\x91\xfb\xa4\x27\xb3\x5f\x70\x7b\xdd\xf9\x86\x97\x9f\x07\xf9\xeb\x26\x71\x8d\xa1\x8a\xa7\xdd\xb2\x40\xef\x6d\xa8\x20\xd0\xbb\x40\xef\x02\xbd\x0b\xf4\x2e\xd0\x7b\x36\xf4\xae\xa4\xc1\xbe\xa9\xc9\x68\xd4\x63\x62\x3a\xdf\x5e\x19\x34\x07\x88\xfd\xbf\xc1\x44\x86\xf7\xa6\x48\xd6\x3a\xa6\xf7\xc6\x48\x02\xcc\x09\xbf\x79\x32\xed\xfd\xf9\x07\xc5\xa2\x7d\x03\x76\xe2\x82\xbc\xa9\xaa\x28\x53\x0a\xa0\x23\x80\x8e\x00\x3a\xb1\xd2\x05\xd0\x11\x40\x87\x57\x3b\x72\xf5\xe7\xde\xc3\xec\xca\xfa\x9f\x0a\x43\x8a\x43\x06\x91\xd9\x0b\xb6\x63\xb1\xcb\xbe\xcd\x5e\x6d\x1c\x62\xaf\xdd\x11\x2d\x73\x63\x59\x65\x7b\xb7\xba\xfb\xd0\x7b\xdf\xb1\x72\xff\x5a\x6b\xd1\x83\x73\x50\x24\xfd\x8b\xc3\xdb\xce\xc6\x77\xce\xca\xbd\xd2\xe1\xfd\xea\x37\xff\xac\xde\xfc\xc1\xb9\xb5\x53\xbe\x7a\xdd\xb9\xf1\x73\x02\xb0\x08\xbd\x8c\x39\x7d\xc6\x57\xbc\xdf\x41\x85\xaf\xa7\x40\x14\x02\x51\x08\x44\x21\x10\x45\xac\x74\x81\x28\x04\xa2\xe0\xd5\x3e\x56\x2d\x62\x81\xa5\xae\x6b\x4d\x60\xe1\xf3\x17\xba\x02\x9e\xba\x5b\x3c\xf1\x51\x14\xd7\x9a\x9f\x54\x3f\xa9\x37\xd8\xbb\x80\xa8\xa3\xce\xfc\xe6\x8d\x5d\xe9\xcc\x0f\xa3\xaa\xe3\xdc\x97\xef\xf9\x42\x74\xe5\x0b\xc8\x85\x04\xe4\x12\x90\x4b\x40\x2e\x01\xb9\x5e\x46\xaf\x19\x31\x22\x5a\x26\x78\x13\x63\xa8\xb2\x75\xeb\x24\x6c\x5c\x75\xd6\x78\x64\xa7\x6e\xb1\x45\x50\xe4\xd6\xb5\x37\x9d\x62\x16\xb0\x9c\x38\x95\x66\x91\x4f\x37\xdd\x03\xc3\x3a\x73\x82\x66\xc8\xb6\x9a\xd6\xa6\x18\x4d\x74\x54\x1a\xe3\xe2\x39\xe5\xc3\x34\x95\xad\x08\x92\x7e\x6d\x33\x94\x0c\x9d\x82\x4e\xdf\x75\x85\x24\x5b\xe5\x53\x4e\xd3\x08\xd2\x23\x72\x07\x14\x29\xe8\xec\x64\xc3\x64\xd5\x63\xe9\x8e\x48\x6f\x4a\xd5\x14\x8d\x23\x28\xfa\x34\xfb\x98\x38\xb5\x85\xd3\x25\x41\xba\xad\x1d\x97\x39\xa1\xe1\xe2\x19\xc3\xd6\xd3\xcc\xd2\x70\xb1\x6f\xac\x6a\xfc\xff\xd8\xd7\x13\x9a\x67\x95\x66\x2a\x26\x54\x56\x57\xca\x5b\xff\x72\xd6\x7f\x49\xa8\x21\xb4\x9e\x81\x18\x79\x17\x57\x16\x08\x1e\x44\x3a\xfd\x9e\xaf\x55\x7f\x17\x05\x16\xc7\x7c\x3d\xc5\x83\xbf\x78\xf0\x17\x0f\xfe\xe2\xc1\x3f\x56\xba\x78\xf0\x4f\xd4\xe2\xd7\xf9\xe0\x1f\x85\x17\x42\xc7\x71\x77\x05\x2e\xb4\x8b\x07\x14\xb8\xd4\xfe\xee\x82\x77\x7c\x74\x07\xbb\x0b\xc1\x1b\xbb\xb2\xbb\x10\x38\xee\x7a\xda\xfd\x7f\xff\x6f\x2d\x2c\x8e\xf9\x7a\x0a\x14\x21\x50\x84\x40\x11\x02\x45\xc4\x4a\x17\x28\x42\xa0\x08\x5e\xed\x5f\xc5\xf6\xc1\xf1\xab\x5c\xb3\x7f\x93\xf5\x8d\x22\x11\x05\xd2\x2e\xd5\xdd\x82\x5f\x3d\xe9\x0a\x8c\xee\x72\xd5\xcd\x47\xd9\x99\x5f\x82\x3a\x06\x30\xdb\x3a\x2e\x38\xdb\x12\x40\x5b\x00\x6d\x01\xb4\x05\xd0\x8e\x95\x2e\x80\xb6\x00\xda\xbc\xda\x02\x68\xf7\x2d\xd0\xb6\x32\x20\xed\x16\x9a\xfc\xfb\xc6\x98\x10\xdc\xda\xfc\x4e\x41\xe3\x41\x4f\x94\x99\x83\xfc\xf5\x80\xd0\x0b\xdc\x35\x54\x37\x81\xfb\xfd\x62\x38\x82\x39\x4d\x24\x43\x55\x41\x72\xc7\xe0\xcd\x06\xa2\xd6\x6c\x95\x2a\xe2\xe9\xa0\x1f\x9f\x0e\x1a\xdf\xeb\x0c\x64\xac\x46\x1c\x15\xda\x3c\x0e\x37\xf0\x54\x11\x73\xd0\x12\x77\xc0\x52\x20\xcd\xf9\x09\x89\xc3\xed\x09\xe1\x1b\x97\xd2\x22\xb3\xa8\xad\xc8\x71\xac\xa3\x3c\xde\xe2\xef\x24\xc1\x2e\xef\x48\xa1\x7e\xc6\xea\xdc\x24\x9f\x41\x24\x73\x7f\x9a\x74\xca\x9a\xdd\x1e\xc9\xd8\x9d\x55\xbd\x1a\x2a\x97\x77\xa4\x50\x89\x75\xe2\xf4\x4a\xac\xc7\xbd\x29\x78\x80\x53\x20\x3a\x0b\x46\x2c\x92\x5c\xbf\x68\xeb\x9a\xc4\x97\x57\xb8\x1c\x15\xd6\xc4\x9b\x8a\xf5\x07\xf4\x76\xbf\xc1\x90\x63\xb2\x85\x37\xda\x50\x9b\xa1\xe3\xde\xdd\x3a\x96\xe9\xb6\xc4\xbe\xb7\x92\xc3\x92\x7e\x9e\x62\xec\x6b\xcd\xf1\xf3\xcc\x1b\x8e\xa9\xd8\xbc\x94\x45\x79\x77\x5d\x65\x7d\x77\x1e\x33\x14\x97\x89\x12\x1c\xde\x0a\x27\x62\xc0\x44\x56\xc4\xd4\x12\x2e\x9e\x6a\x36\x09\x2f\xd6\xcd\x6f\x5f\x3b\xdf\x7d\x5c\xfe\x6a\xcb\x59\xb9\x51\x59\xbd\x59\x3a\xbc\xef\xf5\x71\x39\x0f\xef\x97\x9e\xfc\x80\xca\xab\x97\x4b\x07\xdf\x96\xbf\xd8\xf3\xfe\x6e\x7f\x0e\x07\xc7\x3f\x3c\xdf\x1a\x5f\x8d\xcb\x11\x7e\xde\x37\x81\x62\x46\xb6\xfe\xb9\x9e\xa4\xc1\x09\x7d\x30\x28\x65\x52\xb5\xbc\x78\x28\x96\xdb\x90\xd0\x66\x87\x7c\xe7\x56\x05\xba\xe7\x5f\xfe\x92\x4e\x31\xe1\x8b\xb1\xed\x31\xf7\x19\x44\x32\x8f\x9a\xd4\x39\x92\x40\xe4\x01\x9a\xb1\x0f\xc0\x6f\x2a\x2a\x4c\x51\xd0\x32\x27\x0d\x4f\x7a\x0f\x56\xec\x66\x90\x24\x25\x85\xc0\x39\x16\x39\x26\x99\x5f\xf6\xcc\x93\x1f\x7c\x16\xc8\x20\x7e\xf1\x32\xda\xb9\xac\x50\x91\x67\xa9\x62\xbc\x91\x06\x96\x85\xe7\x20\x3d\x11\xbd\xa1\xe3\x19\x15\xce\x51\x4c\x23\x07\x88\x93\x58\x00\xdd\xd6\xc2\x8e\x9a\x54\x2c\x97\x43\xc8\x35\x1e\xd3\xd0\x4f\x93\x7e\xc5\xa6\xee\xab\x06\xc7\x66\x29\xa7\x95\x55\x60\x65\xd9\xd8\xab\xdc\xd9\x41\x95\xef\xae\x54\xee\xec\x14\x78\x1b\xdc\x31\xf3\x6b\x32\x39\x9c\x2c\x19\x72\x6c\x3e\xc8\x9d\xeb\xea\x51\xe8\x55\xa2\x10\x93\x15\xa2\x37\x31\xa5\x40\x18\xed\x5f\x2e\x8c\x0e\xbd\x76\xf1\xa3\xb1\xc1\xe5\x57\x62\x72\x97\xef\xdd\xce\xc3\x84\x53\x27\x3e\x5c\x5a\x5d\x51\xbb\x73\xaf\xba\xb7\x17\xe9\x03\x4b\x38\xa1\xab\x4e\xe0\xf3\xc2\x91\x65\xfd\xe0\x0c\xcb\x9a\xf8\xc3\xd6\x59\x31\x90\xd1\x8b\xa6\xda\x67\xff\x6d\x23\xf6\x90\x07\x21\xa3\x03\xd1\x5d\xa0\xd8\x01\x96\x79\xa2\xb0\x87\xa0\x27\x0e\x8f\xe4\xc7\x71\xde\x7e\x6d\x6d\xfb\x69\xe5\xc1\x6e\x8f\x30\x8f\x0b\x6f\xbf\xdc\x3c\x02\xa4\x68\x01\x89\x7d\x24\xca\xf9\x70\xe7\x1f\x08\xd6\x1b\x1c\x57\xd9\xdd\xae\x6c\xdc\x70\xf6\x9e\x56\x7f\xdc\x6e\xfb\x81\x2e\x03\xff\xd0\x86\x7e\x74\xe2\xf0\xd7\x62\x4e\x46\xec\x4c\x0f\xe0\x81\x24\xc1\xde\x82\x5c\xb9\xf5\xb8\x7c\xf9\x4a\x4c\x21\xc8\xdb\xb5\x9e\x68\x6b\xf8\x9a\x41\x21\x63\x0a\x43\x54\xd1\x52\xd4\x58\x79\xe0\x1c\xec\x97\x37\x1f\xd7\x36\x7f\xca\x94\x41\x3c\x6f\x57\x7f\xbe\x56\xde\xdf\x88\x4a\x1d\x0c\xdb\xe6\x29\xc8\xbc\xc4\x5a\x40\x77\x0b\x87\x31\x00\x71\x4a\xa7\x6f\xd7\x6f\x39\x92\x7c\x7a\xf2\x44\xa2\x15\x53\x93\x3d\x19\x1c\x67\x63\xad\xf2\xfd\xa3\x4c\x21\xa5\xc8\xac\x36\x84\x9c\xcf\xd6\x9c\xfd\x3b\x7c\x50\x45\x1c\xd1\x9b\x63\x20\x21\x12\xae\xa3\x97\x89\x05\x9a\x01\x91\x15\x09\xb8\xb9\x82\x01\xf7\x96\x74\x11\x13\x73\xf5\x6f\xaf\xe5\x2f\xeb\xf8\x5f\x53\xf1\xcf\xb4\x3c\xaa\x21\x3b\xc7\xe2\xad\xdd\x51\xbb\xfe\x9f\xda\x9d\x5d\xe7\xdf\x9b\x95\x1f\x0f\x9c\xaf\x3e\xf1\x4e\xb1\x7e\x71\x78\xdb\x2b\xb2\x95\x9e\xec\x57\xfe\xb1\xef\xac\xdc\x73\xd6\x7f\x28\x6f\xad\x36\x88\xcb\x1b\x5b\x95\x9f\xbe\x89\x29\xab\x18\x84\x9e\x31\x54\x5b\x8b\x1f\x89\x08\xbb\x0a\x58\x96\x99\x25\x58\x3d\x1b\x3d\xca\x28\x62\x6e\x65\xb6\x72\x7d\xaf\xfc\xe9\xdf\x9c\xfd\x75\x67\x65\x73\x70\x01\x96\xc6\x9d\x95\xcd\x17\x87\xb7\x17\xb1\x6a\xc3\xb8\xb3\xfe\x71\xf9\xf3\x47\x0b\xb0\x14\x6d\x8f\x77\x0e\x78\x1f\x5a\x54\x7d\x7e\xb3\x7c\xf0\xd0\xf3\x98\x6b\x17\xe2\x0d\xf3\x34\x6f\x10\x54\xb7\x77\x2a\xf7\xaf\x85\xed\x4c\x99\x1a\x7f\x04\x8a\xf3\x4c\x0c\x6a\x50\xdc\xbb\xdd\xa1\x77\xea\xed\x2c\x4c\x0c\xd2\xed\x50\x09\x28\x88\x7a\x13\x9e\xa0\x72\x6b\x71\xc6\x26\x04\x74\x8a\x5c\x21\xb1\x8b\xa8\xf7\x61\xaa\x97\xa2\x02\x3b\x67\x22\x1a\x2b\xf1\x89\x0e\x25\xa5\x13\x2e\x3d\x26\xe3\x23\x37\xb8\x6a\xd7\xd7\x2a\xcf\x76\x07\x99\x16\xe3\x63\xe5\xcd\xc7\xe5\xad\x55\xef\xb7\x17\x87\x7e\xe7\x66\xf5\xea\xb3\xd2\x93\x7d\x5d\x89\xda\x10\x8a\x28\xc7\xac\xdc\xa8\x6d\xff\xec\x5c\xbf\x5a\xfe\xfc\x51\x79\x6d\x97\x5f\xf3\x5a\xbe\x9d\x99\x67\x5f\x28\x1c\xe8\x99\x06\x86\x4d\x8e\x18\x6f\x5b\xb1\xce\x7e\x19\xa5\x53\xef\xc9\x34\x98\x4a\x52\x67\x7c\x68\xf1\xe8\x09\x06\xcb\x00\x87\x8e\x1e\x65\x2d\xc0\x52\x12\xcc\xe2\x5f\xa4\xcf\x31\x50\xad\x27\x1a\xb4\x6b\x56\xf3\xb8\x82\x54\xef\xf2\xaf\xee\xf5\xf3\x5e\x70\x44\x03\x74\x3e\x75\xfb\x67\xd1\x8e\xdf\xd3\x64\x31\x37\xfe\x67\x7b\x74\xf4\x24\xa0\xa4\x41\x6a\xf4\xdf\xd4\x7b\x7f\x26\xa3\xfa\x70\xea\x2d\x3f\x2d\xc3\x86\x4d\xe5\x2d\x68\xa6\x9f\x46\xf3\xd4\x9f\x86\x26\x4c\x73\x28\x70\x58\x94\xdf\x19\x35\x0f\x58\x06\x12\x9e\x06\xe1\xb6\xa1\xcc\x22\x26\x6c\x3a\x6f\x10\xe5\x43\xd6\x8a\x9c\x28\xc7\xb5\x71\x60\x79\xe0\x7f\x01\x00\x00\xff\xff\x73\x7e\x6d\x58\x14\x99\x00\x00")

func docBackendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docBackendSwaggerJson,
		"doc/backend.swagger.json",
	)
}

func docBackendSwaggerJson() (*asset, error) {
	bytes, err := docBackendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/backend.swagger.json", size: 39188, mode: os.FileMode(420), modTime: time.Unix(1710122864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _docFrontendSwaggerJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5f\x6b\x1b\x47\x10\x7f\xd7\xa7\x18\xae\x79\xb4\x22\xcb\x71\x0b\xf1\x53\x5d\xd2\x82\x68\x21\x25\x49\x4b\x21\xb8\x61\xb3\x37\x27\x6d\x72\xb7\x7b\xdd\x9d\x53\xac\x06\x41\xf2\x52\x9a\x80\x69\xc0\x7e\xe8\x9f\x50\x30\x84\xb6\x94\x12\xf7\xa9\x7f\x69\xfb\x65\x2a\xcb\xfe\x16\xe5\x56\x77\xba\x3f\x3a\xc9\xb2\xe4\x40\x1f\xf4\xa8\xdb\xd9\xf9\xfd\x66\x7e\x73\x3b\x73\xab\x87\x35\x00\xc7\x3c\x60\xed\x36\x6a\x67\x0b\x9c\x8d\xcb\xeb\xce\x5a\xfc\x4c\x48\x4f\x39\x5b\x10\xaf\x03\x38\x24\xc8\xc7\x78\xfd\x1d\xad\x24\xa1\x74\x61\xfb\xfd\x96\x35\x04\x70\x5c\x34\x5c\x8b\x90\x84\x92\xb1\xc9\xad\x0e\x82\x27\x7c\x04\x66\x0c\x12\x78\xe9\x0e\x16\x8a\x74\x47\x17\xb5\x49\xac\x9b\x09\x20\x80\xc3\x95\x24\xc6\x69\x8c\x0a\xe0\x48\x16\x58\x58\xf4\xfc\x5e\x62\x06\xe0\x44\xda\x8f\x1f\x76\x88\x42\xb3\xd5\x68\xc4\x8b\x75\x8e\xc4\x2f\x73\x15\x64\x56\x18\x30\x61\xed\xa4\x92\xf8\x26\xee\xb2\x20\xf4\xd1\x9a\x58\x8b\x7e\x0d\xa0\x6f\x43\x25\xd6\x36\xce\x16\xdc\xb6\x8f\x27\xa0\x5b\xd2\xc5\xdd\x9b\xa8\xbb\x82\x63\xe6\xbc\x14\xf3\xe9\x9f\x5f\x9e\xbc\x7c\x91\x38\x5e\xab\x76\x74\xdd\x5a\x9b\x33\x5d\x3d\x7a\x72\x7a\xf8\xfb\xf0\xe5\xe1\xf0\xd9\x67\x19\xd3\x1d\xcb\xd4\xf0\x0e\x06\x98\x91\xb5\x29\x48\xd3\x67\xd3\xe1\x8c\x6d\xb9\x92\x26\x2a\x18\xb3\x30\xf4\x05\x67\x31\x50\xe3\x9e\x51\x32\xdd\x98\x7f\xae\x38\x21\xd5\x0d\x69\x64\x41\xe6\x2b\xd4\xca\x8d\xf8\x05\xf9\x62\xd4\x31\x59\x65\x35\xba\xcd\x86\x1a\x65\x26\x2f\x7c\x1b\xf3\x75\x10\x87\x1e\x05\x01\xd3\xbd\x2c\x43\xe3\x04\x02\x38\x2a\x44\x6d\x31\x5b\xee\x64\xa6\xef\x8c\x7e\xbe\x27\x0c\xe5\xf7\x68\x34\xa1\x92\x06\x4d\x01\x07\xc0\xd9\x58\x5f\x2f\x3d\x9a\x14\x69\x1b\x4c\xc4\x39\x1a\xe3\x45\x3e\xa4\x9e\x2e\xe7\xdc\x8f\x38\xc7\x72\xb1\x09\x67\x00\xce\x25\x8d\x5e\xec\xe7\xb5\x86\x8b\x9e\x90\xc2\xf2\x6d\x74\x9b\x19\xd5\x1b\x89\x53\xa7\xb0\xb5\x9f\xfb\xd5\x5f\x2b\xb2\x6e\x9e\xc9\xfa\x06\x52\xa4\x25\xba\xf0\xa0\x83\x12\xa8\x83\x31\x75\x15\x69\x8e\xc0\x35\x32\x42\x37\x0d\x6b\x46\x28\xb3\x28\x6c\x2e\x43\xc1\x45\x1f\x97\xa5\xb0\x39\x87\x76\x55\x14\x3e\x89\xd0\x10\xb8\x8c\x18\x74\x99\x2f\x5c\x46\x08\x1e\x13\x3e\xba\x17\x20\xea\xdb\x5a\x2b\x6d\xae\xdf\xbd\x87\x9c\xe6\x95\x73\x73\x21\x39\x23\x83\x1a\x5c\x85\x06\xa4\x22\x60\x11\x75\x50\x52\xf2\x3a\x2e\x98\xcf\x2b\x4b\xd3\xe8\xb0\x2e\x42\x88\x3a\x10\x26\x3e\xf4\x81\x14\x30\xab\x70\x41\xfe\x05\xe9\x2d\x55\x71\x31\x3b\x4f\x45\x72\x96\xc8\xb3\xc0\xaf\x9e\x13\x3c\xad\xb3\x28\xb4\x05\xc6\x95\xf4\x7c\xc1\x69\x31\xf4\x8d\xf3\x2a\x33\x0e\xdb\x57\xfc\xfe\xcc\xc2\x9e\x85\xba\x68\xcc\xa4\x14\x04\x4c\xf6\x40\x48\x60\x10\x49\x41\x40\x22\x58\x4c\xf6\xd7\xe7\x78\xcb\xe3\xc3\x1f\x35\x60\xfc\xee\x2d\x04\xe2\xa2\xc7\x22\x9f\xce\x04\xfa\x40\xe2\x6e\x88\x9c\xce\x84\xba\xe0\xe3\xa2\x56\x41\xbb\x38\xca\x24\xcf\x4a\x73\xc7\x78\x69\x27\xb7\xcf\x20\x8f\xb4\xa0\x5e\x69\x6f\x29\xf2\xed\x30\xb4\x0d\xf6\xf6\x4e\x25\x91\xbc\xc3\xdd\xba\xd2\xae\x1d\x29\x9b\xb5\xbc\x5d\x42\xd6\xb6\xfd\x6c\x0a\x9c\xab\xed\x0f\x9f\x7c\x7e\xfc\xfc\xa7\xc1\x17\xbf\xe6\xbb\x78\x49\x8c\x93\x7f\x0e\x06\xdf\x7c\x7b\xfc\x7c\x6f\xf0\xf4\x70\xf0\xd7\xfe\xe0\xc9\x5e\xe5\xae\xd2\xbc\x90\x1f\xf1\xee\x7c\x98\xb0\xfa\xbf\x8f\x0a\x09\xcf\xd5\x9c\xb0\x9a\x13\x56\x73\xc2\x6a\x4e\x98\x8a\xbe\x9a\x13\x56\x73\x42\x99\x76\xe5\x9c\x50\xb8\xe8\x78\x85\x53\x42\x71\x1e\x18\xdf\xc2\xe4\x82\xcb\x6e\x07\x92\x28\x93\x20\x73\x83\x02\xf5\x42\x7b\xa9\xa2\x46\x2b\xe3\xcb\x94\x50\xc7\xbd\x9d\x44\xa9\x57\x3b\x5c\xb9\x58\xee\xde\xa9\x0f\x21\x09\xdb\xa8\x0b\x8a\x38\x9e\xd2\x01\xa3\x64\xf9\x8d\x4d\xa7\xa4\x79\xa9\x92\x47\x3d\x78\x24\x2d\x58\xac\x82\x7d\xc8\x88\x50\x5b\xdb\x8f\x6f\xaf\xd7\xaf\xee\x3c\x6c\xae\xf5\x2f\x39\x95\xd2\x04\x68\x0c\x6b\x4f\x25\x6b\x48\x0b\xd9\x3e\x0f\x9d\xd4\x61\xad\xac\xc5\x18\x35\xbb\xde\x3b\x3d\xf8\xea\xe4\xe8\xa8\x70\x8f\xe5\x94\x2a\x6d\x25\xc2\xc5\x88\x90\x43\xb3\x26\x13\xc3\x65\x0a\xc6\xb4\x66\xbd\x22\x96\x20\x0c\xca\xf6\xd3\xf5\x48\x56\x67\x9e\x23\x93\xc7\x48\xf9\x94\x9b\x11\x9d\x29\xb2\x2b\x55\xd3\xe9\xfe\xdf\xe7\xa8\x3d\x18\xbc\xf8\xfa\xdf\xdf\x7e\xac\x2e\xc4\x96\xa4\xeb\x29\x87\x85\xab\x50\xb8\x8b\xd7\xe0\x95\x8d\x99\xa2\xb7\xae\x55\x0b\x9c\x5c\x01\x2f\x5a\x4b\x83\x67\x7b\xc3\xef\x7f\x9e\x2b\x89\xc2\x85\x18\x0c\x06\xfb\x7b\x83\x3f\x0e\xca\xf9\xab\xb8\x5e\x5c\x22\x91\x28\xd9\x5d\x1f\x6f\x12\xa3\xa9\xc1\xbd\xea\xda\xcd\x0a\x62\xde\xca\x1d\x3c\x3b\x1a\x7e\xf7\x78\x78\xf0\xc3\xf0\xe9\x2f\xc7\x8f\x1e\x57\x24\xb5\x94\xb3\xf2\x77\xd6\x12\x09\x9b\xfc\xe0\x3d\x6f\x25\x64\x5f\xb3\xd3\x78\x8f\xfb\x69\xda\xac\xaf\x55\xf5\xd5\xb4\x47\x4f\x84\xc2\x42\xf1\x2e\xe6\xfe\x6a\x49\xff\xbc\xf8\xa8\xbe\x1d\x86\xf5\x96\x9b\xad\x08\x4b\xa8\x83\x2c\xfe\xcc\x2f\xe4\xec\x2d\x64\x1a\xf5\x2d\x75\x1f\x2b\xdf\xd3\x69\x10\xdb\x11\x75\x94\x16\x9f\xda\xaf\x90\x99\x38\x71\x8c\xb5\x7e\xed\xbf\x00\x00\x00\xff\xff\xb6\xe2\xf8\x09\xbc\x1a\x00\x00")

func docFrontendSwaggerJsonBytes() ([]byte, error) {
	return bindataRead(
		_docFrontendSwaggerJson,
		"doc/frontend.swagger.json",
	)
}

func docFrontendSwaggerJson() (*asset, error) {
	bytes, err := docFrontendSwaggerJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "doc/frontend.swagger.json", size: 6844, mode: os.FileMode(420), modTime: time.Unix(1710122864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"doc/backend.swagger.json":  docBackendSwaggerJson,
	"doc/frontend.swagger.json": docFrontendSwaggerJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"doc": &bintree{nil, map[string]*bintree{
		"backend.swagger.json":  &bintree{docBackendSwaggerJson, map[string]*bintree{}},
		"frontend.swagger.json": &bintree{docFrontendSwaggerJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
