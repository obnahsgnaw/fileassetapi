syntax = "proto3";
package fileasset_backend_api.upload.v1;
option go_package = "fileasset_backend_api/upload/v1";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

// 获取上传地址，前端上传oss， 前端提交， 验证上传， 完成

// 文件上传服务
service UploadService{
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "1.上传服务";
  };
  rpc FetchUrl (FetchUrlRequest) returns (FetchUrlResponse) {
    option (google.api.http) = {
      get: "/v1/upload-url"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取上传地址";
      description: "其他服务获取上传地址对外给出，这里也可以手动获取";
      security:{
        security_requirement:{
          key:"AppId"
        }
        security_requirement:{
          key:"BearerToken"
        }
      }
    };
  }
  rpc Confirm(ConfirmRequest) returns (ConfirmResponse) {
    option (google.api.http) = {
      post: "/v1/upload-confirm"
      body:"*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "确认上传的文件";
      description: "确认上传的文件，否则会被自动情况";
      security:{
        security_requirement:{
          key:"AppId"
        }
        security_requirement:{
          key:"BearerToken"
        }
      }
    };
  }
}

// 某个服务，某个用户，某个模块 需要文件上传
message FetchUrlRequest{
  string project = 1[// 服务项目  比如 uav，user,company...
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["project"];
      description: "project";
    },
    (validate.rules).string = {ignore_empty: false, max_len:100}
  ];
  uint32 uid = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["uid"];
      description: "uid";
    },
    (validate.rules).uint32 = {ignore_empty: false, gte:0}
  ];
  string module = 3[// 模块标识 对应 bucket, 比如 uav-vendor， uav-model, user-avatar ...
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["module"];
      description: "module";
    },
    (validate.rules).string = {ignore_empty: false, max_len:100}
  ];
  uint32 max_size = 4[// 文件最大字节
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["size"];
      description: "size";
    },
    (validate.rules).uint32 = {ignore_empty: false, gt:0}
  ];
  string content_type = 5[// 文件类型
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["content_type"];
      description: "content_type";
    },
    (validate.rules).string = {ignore_empty: false, min_len:1,max_len:50}
  ];
  string extension = 6[// 文件后缀
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["extension"];
      description: "extension";
    },
    (validate.rules).string = {ignore_empty: false, max_len:50}
  ];
  uint32 ttl = 7[// 过期时间
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["ttl"];
      description: "ttl";
    },
    (validate.rules).uint32 = {ignore_empty: false, gte:0, lte:604800}
  ];
  uint32 part = 8[// 分片数量 0=不分
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "part num";
    },
    (validate.rules).uint32 = {ignore_empty: false, gte:0, lte:9999}
  ];
}
message FetchUrlResponse{
  string module = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "module";
    }
  ];
  string upload_id = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "multipart upload id";
    }
  ];
  string name = 3[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["name"];
      description: "file name";
    }
  ];
  repeated string url = 4[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "upload url";
    }
  ]; // 如果分片会返回多个 所以是多个
}
message ConfirmRequest{
  string project = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["project"]
      description: "project";
    },
    (validate.rules).string = {ignore_empty: false, max_len:100}
  ];
  uint32 uid = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      required:["uid"];
      description: "uid";
    },
    (validate.rules).uint32 = {ignore_empty: false, gte:0}
  ];
  string module = 3[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "module";
    },
    (validate.rules).string = {ignore_empty: false, max_len:100}
  ];
  string target = 4[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "target";
    },
    (validate.rules).string = {ignore_empty: false, max_len:50}
  ];
  repeated string names = 5[// 多个文件可以同时确认，会进行增删更新
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "names";
    },
    (validate.rules).repeated = {ignore_empty: false, unique:true}
  ];
}
message ConfirmResponse{
  bool success = 1[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "success or failed";
    }
  ];
  string error = 2[
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "failed message";
    }
  ];
}
