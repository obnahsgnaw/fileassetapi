// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fileasset_frontend_api/index/v1/index.proto

package indexv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IndexService_Version_FullMethodName = "/fileasset_frontend_api.index.v1.IndexService/Version"
)

// IndexServiceClient is the client API for IndexService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndexServiceClient interface {
	// rpc 方法， restful 接口
	Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error)
}

type indexServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexServiceClient(cc grpc.ClientConnInterface) IndexServiceClient {
	return &indexServiceClient{cc}
}

func (c *indexServiceClient) Version(ctx context.Context, in *VersionRequest, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := c.cc.Invoke(ctx, IndexService_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServiceServer is the server API for IndexService service.
// All implementations should embed UnimplementedIndexServiceServer
// for forward compatibility
type IndexServiceServer interface {
	// rpc 方法， restful 接口
	Version(context.Context, *VersionRequest) (*VersionResponse, error)
}

// UnimplementedIndexServiceServer should be embedded to have forward compatible implementations.
type UnimplementedIndexServiceServer struct {
}

func (UnimplementedIndexServiceServer) Version(context.Context, *VersionRequest) (*VersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}

// UnsafeIndexServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexServiceServer will
// result in compilation errors.
type UnsafeIndexServiceServer interface {
	mustEmbedUnimplementedIndexServiceServer()
}

func RegisterIndexServiceServer(s grpc.ServiceRegistrar, srv IndexServiceServer) {
	s.RegisterService(&IndexService_ServiceDesc, srv)
}

func _IndexService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServiceServer).Version(ctx, req.(*VersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndexService_ServiceDesc is the grpc.ServiceDesc for IndexService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileasset_frontend_api.index.v1.IndexService",
	HandlerType: (*IndexServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _IndexService_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileasset_frontend_api/index/v1/index.proto",
}

const (
	OptionsService_OptionList_FullMethodName = "/fileasset_frontend_api.index.v1.OptionsService/OptionList"
)

// OptionsServiceClient is the client API for OptionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OptionsServiceClient interface {
	OptionList(ctx context.Context, in *OptionListRequest, opts ...grpc.CallOption) (*OptionListResponse, error)
}

type optionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOptionsServiceClient(cc grpc.ClientConnInterface) OptionsServiceClient {
	return &optionsServiceClient{cc}
}

func (c *optionsServiceClient) OptionList(ctx context.Context, in *OptionListRequest, opts ...grpc.CallOption) (*OptionListResponse, error) {
	out := new(OptionListResponse)
	err := c.cc.Invoke(ctx, OptionsService_OptionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OptionsServiceServer is the server API for OptionsService service.
// All implementations should embed UnimplementedOptionsServiceServer
// for forward compatibility
type OptionsServiceServer interface {
	OptionList(context.Context, *OptionListRequest) (*OptionListResponse, error)
}

// UnimplementedOptionsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOptionsServiceServer struct {
}

func (UnimplementedOptionsServiceServer) OptionList(context.Context, *OptionListRequest) (*OptionListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptionList not implemented")
}

// UnsafeOptionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OptionsServiceServer will
// result in compilation errors.
type UnsafeOptionsServiceServer interface {
	mustEmbedUnimplementedOptionsServiceServer()
}

func RegisterOptionsServiceServer(s grpc.ServiceRegistrar, srv OptionsServiceServer) {
	s.RegisterService(&OptionsService_ServiceDesc, srv)
}

func _OptionsService_OptionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OptionListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OptionsServiceServer).OptionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OptionsService_OptionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OptionsServiceServer).OptionList(ctx, req.(*OptionListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OptionsService_ServiceDesc is the grpc.ServiceDesc for OptionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OptionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileasset_frontend_api.index.v1.OptionsService",
	HandlerType: (*OptionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OptionList",
			Handler:    _OptionsService_OptionList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileasset_frontend_api/index/v1/index.proto",
}
