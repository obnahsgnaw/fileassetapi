// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fileasset_frontend_api/upload/v1/entity.proto

package uploadv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigRequestMultiError, or
// nil if none found.
func (m *ConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetReqId()) != 10 {
		err := ConfigRequestValidationError{
			field:  "ReqId",
			reason: "value length must be 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if len(errors) > 0 {
		return ConfigRequestMultiError(errors)
	}

	return nil
}

// ConfigRequestMultiError is an error wrapping multiple validation errors
// returned by ConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigRequestMultiError) AllErrors() []error { return m }

// ConfigRequestValidationError is the validation error returned by
// ConfigRequest.Validate if the designated constraints aren't met.
type ConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigRequestValidationError) ErrorName() string { return "ConfigRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigRequestValidationError{}

// Validate checks the field values on ConfigResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfigResponseMultiError,
// or nil if none found.
func (m *ConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SessionId

	// no validation rules for MaxSize

	// no validation rules for Ttl

	// no validation rules for Multipart

	// no validation rules for MaxCount

	if len(errors) > 0 {
		return ConfigResponseMultiError(errors)
	}

	return nil
}

// ConfigResponseMultiError is an error wrapping multiple validation errors
// returned by ConfigResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigResponseMultiError) AllErrors() []error { return m }

// ConfigResponseValidationError is the validation error returned by
// ConfigResponse.Validate if the designated constraints aren't met.
type ConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigResponseValidationError) ErrorName() string { return "ConfigResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigResponseValidationError{}

// Validate checks the field values on UrlRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UrlRequestMultiError, or
// nil if none found.
func (m *UrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSessionId()) != 30 {
		err := UrlRequestValidationError{
			field:  "SessionId",
			reason: "value length must be 30 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)

	}

	if l := utf8.RuneCountInString(m.GetContentType()); l < 1 || l > 50 {
		err := UrlRequestValidationError{
			field:  "ContentType",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExtension()) > 50 {
		err := UrlRequestValidationError{
			field:  "Extension",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPartNum() < 0 {
		err := UrlRequestValidationError{
			field:  "PartNum",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UrlRequestMultiError(errors)
	}

	return nil
}

// UrlRequestMultiError is an error wrapping multiple validation errors
// returned by UrlRequest.ValidateAll() if the designated constraints aren't met.
type UrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlRequestMultiError) AllErrors() []error { return m }

// UrlRequestValidationError is the validation error returned by
// UrlRequest.Validate if the designated constraints aren't met.
type UrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlRequestValidationError) ErrorName() string { return "UrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e UrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlRequestValidationError{}

// Validate checks the field values on UrlResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UrlResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UrlResponseMultiError, or
// nil if none found.
func (m *UrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UploadId

	// no validation rules for Name

	if len(errors) > 0 {
		return UrlResponseMultiError(errors)
	}

	return nil
}

// UrlResponseMultiError is an error wrapping multiple validation errors
// returned by UrlResponse.ValidateAll() if the designated constraints aren't met.
type UrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UrlResponseMultiError) AllErrors() []error { return m }

// UrlResponseValidationError is the validation error returned by
// UrlResponse.Validate if the designated constraints aren't met.
type UrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UrlResponseValidationError) ErrorName() string { return "UrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e UrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UrlResponseValidationError{}
