// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fileasset_backend_api/download/v1/download.proto

package downloadv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DownloadService_FetchKey_FullMethodName = "/fileasset_backend_api.download.v1.DownloadService/FetchKey"
)

// DownloadServiceClient is the client API for DownloadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadServiceClient interface {
	// 获取特定配置的下载key
	FetchKey(ctx context.Context, in *FetchKeyRequest, opts ...grpc.CallOption) (*FetchKeyResponse, error)
}

type downloadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadServiceClient(cc grpc.ClientConnInterface) DownloadServiceClient {
	return &downloadServiceClient{cc}
}

func (c *downloadServiceClient) FetchKey(ctx context.Context, in *FetchKeyRequest, opts ...grpc.CallOption) (*FetchKeyResponse, error) {
	out := new(FetchKeyResponse)
	err := c.cc.Invoke(ctx, DownloadService_FetchKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServiceServer is the server API for DownloadService service.
// All implementations should embed UnimplementedDownloadServiceServer
// for forward compatibility
type DownloadServiceServer interface {
	// 获取特定配置的下载key
	FetchKey(context.Context, *FetchKeyRequest) (*FetchKeyResponse, error)
}

// UnimplementedDownloadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDownloadServiceServer struct {
}

func (UnimplementedDownloadServiceServer) FetchKey(context.Context, *FetchKeyRequest) (*FetchKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchKey not implemented")
}

// UnsafeDownloadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServiceServer will
// result in compilation errors.
type UnsafeDownloadServiceServer interface {
	mustEmbedUnimplementedDownloadServiceServer()
}

func RegisterDownloadServiceServer(s grpc.ServiceRegistrar, srv DownloadServiceServer) {
	s.RegisterService(&DownloadService_ServiceDesc, srv)
}

func _DownloadService_FetchKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServiceServer).FetchKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DownloadService_FetchKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServiceServer).FetchKey(ctx, req.(*FetchKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DownloadService_ServiceDesc is the grpc.ServiceDesc for DownloadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DownloadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileasset_backend_api.download.v1.DownloadService",
	HandlerType: (*DownloadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchKey",
			Handler:    _DownloadService_FetchKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileasset_backend_api/download/v1/download.proto",
}
