// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fileasset_backend_api/common/v1/obj.proto

package commonv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on IntIdRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *IntIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in IntIdRequestMultiError, or
// nil if none found.
func (m *IntIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IntIdRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IntIdRequestMultiError(errors)
	}

	return nil
}

// IntIdRequestMultiError is an error wrapping multiple validation errors
// returned by IntIdRequest.ValidateAll() if the designated constraints aren't met.
type IntIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntIdRequestMultiError) AllErrors() []error { return m }

// IntIdRequestValidationError is the validation error returned by
// IntIdRequest.Validate if the designated constraints aren't met.
type IntIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntIdRequestValidationError) ErrorName() string { return "IntIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e IntIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntIdRequestValidationError{}

// Validate checks the field values on StringIdRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StringIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringIdRequestMultiError, or nil if none found.
func (m *StringIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StringIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 40 {
		err := StringIdRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return StringIdRequestMultiError(errors)
	}

	return nil
}

// StringIdRequestMultiError is an error wrapping multiple validation errors
// returned by StringIdRequest.ValidateAll() if the designated constraints
// aren't met.
type StringIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringIdRequestMultiError) AllErrors() []error { return m }

// StringIdRequestValidationError is the validation error returned by
// StringIdRequest.Validate if the designated constraints aren't met.
type StringIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringIdRequestValidationError) ErrorName() string { return "StringIdRequestValidationError" }

// Error satisfies the builtin error interface
func (e StringIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringIdRequestValidationError{}

// Validate checks the field values on IntIdOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IntIdOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IntIdOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IntIdOperateRequestMultiError, or nil if none found.
func (m *IntIdOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IntIdOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetId() <= 0 {
		err := IntIdOperateRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := IntIdOperateRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntIdOperateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntIdOperateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntIdOperateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return IntIdOperateRequestMultiError(errors)
	}

	return nil
}

// IntIdOperateRequestMultiError is an error wrapping multiple validation
// errors returned by IntIdOperateRequest.ValidateAll() if the designated
// constraints aren't met.
type IntIdOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntIdOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntIdOperateRequestMultiError) AllErrors() []error { return m }

// IntIdOperateRequestValidationError is the validation error returned by
// IntIdOperateRequest.Validate if the designated constraints aren't met.
type IntIdOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntIdOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntIdOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntIdOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntIdOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntIdOperateRequestValidationError) ErrorName() string {
	return "IntIdOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IntIdOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntIdOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntIdOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntIdOperateRequestValidationError{}

// Validate checks the field values on StringIdOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StringIdOperateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringIdOperateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringIdOperateRequestMultiError, or nil if none found.
func (m *StringIdOperateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StringIdOperateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := StringIdOperateRequestValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetData() == nil {
		err := StringIdOperateRequestValidationError{
			field:  "Data",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StringIdOperateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StringIdOperateRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StringIdOperateRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StringIdOperateRequestMultiError(errors)
	}

	return nil
}

// StringIdOperateRequestMultiError is an error wrapping multiple validation
// errors returned by StringIdOperateRequest.ValidateAll() if the designated
// constraints aren't met.
type StringIdOperateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringIdOperateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringIdOperateRequestMultiError) AllErrors() []error { return m }

// StringIdOperateRequestValidationError is the validation error returned by
// StringIdOperateRequest.Validate if the designated constraints aren't met.
type StringIdOperateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringIdOperateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringIdOperateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringIdOperateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringIdOperateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringIdOperateRequestValidationError) ErrorName() string {
	return "StringIdOperateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StringIdOperateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringIdOperateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringIdOperateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringIdOperateRequestValidationError{}

// Validate checks the field values on ConflictData with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConflictData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConflictData with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConflictDataMultiError, or
// nil if none found.
func (m *ConflictData) ValidateAll() error {
	return m.validate(true)
}

func (m *ConflictData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetConflict() == nil {
		err := ConflictDataValidationError{
			field:  "Conflict",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConflict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConflictDataValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConflictDataValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConflict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConflictDataValidationError{
				field:  "Conflict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConflictDataMultiError(errors)
	}

	return nil
}

// ConflictDataMultiError is an error wrapping multiple validation errors
// returned by ConflictData.ValidateAll() if the designated constraints aren't met.
type ConflictDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConflictDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConflictDataMultiError) AllErrors() []error { return m }

// ConflictDataValidationError is the validation error returned by
// ConflictData.Validate if the designated constraints aren't met.
type ConflictDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConflictDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConflictDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConflictDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConflictDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConflictDataValidationError) ErrorName() string { return "ConflictDataValidationError" }

// Error satisfies the builtin error interface
func (e ConflictDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConflictData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConflictDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConflictDataValidationError{}

// Validate checks the field values on Conflict with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Conflict) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conflict with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConflictMultiError, or nil
// if none found.
func (m *Conflict) ValidateAll() error {
	return m.validate(true)
}

func (m *Conflict) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetValue()); l < 1 || l > 100 {
		err := ConflictValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConflictMultiError(errors)
	}

	return nil
}

// ConflictMultiError is an error wrapping multiple validation errors returned
// by Conflict.ValidateAll() if the designated constraints aren't met.
type ConflictMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConflictMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConflictMultiError) AllErrors() []error { return m }

// ConflictValidationError is the validation error returned by
// Conflict.Validate if the designated constraints aren't met.
type ConflictValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConflictValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConflictValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConflictValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConflictValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConflictValidationError) ErrorName() string { return "ConflictValidationError" }

// Error satisfies the builtin error interface
func (e ConflictValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConflict.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConflictValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConflictValidationError{}

// Validate checks the field values on PaginateConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaginateConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginateConfig with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaginateConfigMultiError,
// or nil if none found.
func (m *PaginateConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginateConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetKeywordOptions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PaginateConfigValidationError{
						field:  fmt.Sprintf("KeywordOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PaginateConfigValidationError{
						field:  fmt.Sprintf("KeywordOptions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PaginateConfigValidationError{
					field:  fmt.Sprintf("KeywordOptions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for SortColumns

	// no validation rules for OptionColumns

	if len(errors) > 0 {
		return PaginateConfigMultiError(errors)
	}

	return nil
}

// PaginateConfigMultiError is an error wrapping multiple validation errors
// returned by PaginateConfig.ValidateAll() if the designated constraints
// aren't met.
type PaginateConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginateConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginateConfigMultiError) AllErrors() []error { return m }

// PaginateConfigValidationError is the validation error returned by
// PaginateConfig.Validate if the designated constraints aren't met.
type PaginateConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginateConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginateConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginateConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginateConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginateConfigValidationError) ErrorName() string { return "PaginateConfigValidationError" }

// Error satisfies the builtin error interface
func (e PaginateConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginateConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginateConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginateConfigValidationError{}

// Validate checks the field values on PaginateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PaginateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginateRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginateRequestMultiError, or nil if none found.
func (m *PaginateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPage() < 0 {
		err := PaginateRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := PaginateRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Sort

	if len(errors) > 0 {
		return PaginateRequestMultiError(errors)
	}

	return nil
}

// PaginateRequestMultiError is an error wrapping multiple validation errors
// returned by PaginateRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginateRequestMultiError) AllErrors() []error { return m }

// PaginateRequestValidationError is the validation error returned by
// PaginateRequest.Validate if the designated constraints aren't met.
type PaginateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginateRequestValidationError) ErrorName() string { return "PaginateRequestValidationError" }

// Error satisfies the builtin error interface
func (e PaginateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginateRequestValidationError{}

// Validate checks the field values on PaginateAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PaginateAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaginateAllRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PaginateAllRequestMultiError, or nil if none found.
func (m *PaginateAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PaginateAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for All

	if m.GetPage() < 0 {
		err := PaginateAllRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := PaginateAllRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Sort

	if len(errors) > 0 {
		return PaginateAllRequestMultiError(errors)
	}

	return nil
}

// PaginateAllRequestMultiError is an error wrapping multiple validation errors
// returned by PaginateAllRequest.ValidateAll() if the designated constraints
// aren't met.
type PaginateAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaginateAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaginateAllRequestMultiError) AllErrors() []error { return m }

// PaginateAllRequestValidationError is the validation error returned by
// PaginateAllRequest.Validate if the designated constraints aren't met.
type PaginateAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaginateAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaginateAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaginateAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaginateAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaginateAllRequestValidationError) ErrorName() string {
	return "PaginateAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PaginateAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaginateAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaginateAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaginateAllRequestValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Region) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RegionMultiError, or nil if none found.
func (m *Region) ValidateAll() error {
	return m.validate(true)
}

func (m *Region) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCountry()); l < 1 || l > 100 {
		err := RegionValidationError{
			field:  "Country",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetProvince()); l < 1 || l > 100 {
		err := RegionValidationError{
			field:  "Province",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCity()); l < 1 || l > 100 {
		err := RegionValidationError{
			field:  "City",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetDistrict()); l < 1 || l > 255 {
		err := RegionValidationError{
			field:  "District",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetStreet()); l < 1 || l > 255 {
		err := RegionValidationError{
			field:  "Street",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RegionMultiError(errors)
	}

	return nil
}

// RegionMultiError is an error wrapping multiple validation errors returned by
// Region.ValidateAll() if the designated constraints aren't met.
type RegionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RegionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RegionMultiError) AllErrors() []error { return m }

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on Position with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Position) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Position with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PositionMultiError, or nil
// if none found.
func (m *Position) ValidateAll() error {
	return m.validate(true)
}

func (m *Position) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetLon(); val < -180 || val > 180 {
		err := PositionValidationError{
			field:  "Lon",
			reason: "value must be inside range [-180, 180]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetLat(); val < -90 || val > 90 {
		err := PositionValidationError{
			field:  "Lat",
			reason: "value must be inside range [-90, 90]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Alt

	if len(errors) > 0 {
		return PositionMultiError(errors)
	}

	return nil
}

// PositionMultiError is an error wrapping multiple validation errors returned
// by Position.ValidateAll() if the designated constraints aren't met.
type PositionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PositionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PositionMultiError) AllErrors() []error { return m }

// PositionValidationError is the validation error returned by
// Position.Validate if the designated constraints aren't met.
type PositionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PositionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PositionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PositionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PositionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PositionValidationError) ErrorName() string { return "PositionValidationError" }

// Error satisfies the builtin error interface
func (e PositionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPosition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PositionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PositionValidationError{}

// Validate checks the field values on AttrConfigPaginateAllRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttrConfigPaginateAllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrConfigPaginateAllRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrConfigPaginateAllRequestMultiError, or nil if none found.
func (m *AttrConfigPaginateAllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrConfigPaginateAllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetId() < 0 {
		err := AttrConfigPaginateAllRequestValidationError{
			field:  "TargetId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for All

	if m.GetPage() < 0 {
		err := AttrConfigPaginateAllRequestValidationError{
			field:  "Page",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetLimit() < 0 {
		err := AttrConfigPaginateAllRequestValidationError{
			field:  "Limit",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Keyword

	// no validation rules for Sort

	if len(errors) > 0 {
		return AttrConfigPaginateAllRequestMultiError(errors)
	}

	return nil
}

// AttrConfigPaginateAllRequestMultiError is an error wrapping multiple
// validation errors returned by AttrConfigPaginateAllRequest.ValidateAll() if
// the designated constraints aren't met.
type AttrConfigPaginateAllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrConfigPaginateAllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrConfigPaginateAllRequestMultiError) AllErrors() []error { return m }

// AttrConfigPaginateAllRequestValidationError is the validation error returned
// by AttrConfigPaginateAllRequest.Validate if the designated constraints
// aren't met.
type AttrConfigPaginateAllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrConfigPaginateAllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrConfigPaginateAllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrConfigPaginateAllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrConfigPaginateAllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrConfigPaginateAllRequestValidationError) ErrorName() string {
	return "AttrConfigPaginateAllRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttrConfigPaginateAllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrConfigPaginateAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrConfigPaginateAllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrConfigPaginateAllRequestValidationError{}

// Validate checks the field values on AttrConfigRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttrConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrConfigRequestMultiError, or nil if none found.
func (m *AttrConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetId() < 0 {
		err := AttrConfigRequestValidationError{
			field:  "TargetId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetConfig() == nil {
		err := AttrConfigRequestValidationError{
			field:  "Config",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetConfig()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttrConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttrConfigRequestValidationError{
					field:  "Config",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttrConfigRequestValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttrConfigRequestMultiError(errors)
	}

	return nil
}

// AttrConfigRequestMultiError is an error wrapping multiple validation errors
// returned by AttrConfigRequest.ValidateAll() if the designated constraints
// aren't met.
type AttrConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrConfigRequestMultiError) AllErrors() []error { return m }

// AttrConfigRequestValidationError is the validation error returned by
// AttrConfigRequest.Validate if the designated constraints aren't met.
type AttrConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrConfigRequestValidationError) ErrorName() string {
	return "AttrConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttrConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrConfigRequestValidationError{}

// Validate checks the field values on AttrConfigIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AttrConfigIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrConfigIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrConfigIdRequestMultiError, or nil if none found.
func (m *AttrConfigIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrConfigIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetTargetId() < 0 {
		err := AttrConfigIdRequestValidationError{
			field:  "TargetId",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetAttr()); l < 1 || l > 40 {
		err := AttrConfigIdRequestValidationError{
			field:  "Attr",
			reason: "value length must be between 1 and 40 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttrConfigIdRequestMultiError(errors)
	}

	return nil
}

// AttrConfigIdRequestMultiError is an error wrapping multiple validation
// errors returned by AttrConfigIdRequest.ValidateAll() if the designated
// constraints aren't met.
type AttrConfigIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrConfigIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrConfigIdRequestMultiError) AllErrors() []error { return m }

// AttrConfigIdRequestValidationError is the validation error returned by
// AttrConfigIdRequest.Validate if the designated constraints aren't met.
type AttrConfigIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrConfigIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrConfigIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrConfigIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrConfigIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrConfigIdRequestValidationError) ErrorName() string {
	return "AttrConfigIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AttrConfigIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrConfigIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrConfigIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrConfigIdRequestValidationError{}

// Validate checks the field values on AttrConfig with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrConfig with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrConfigMultiError, or
// nil if none found.
func (m *AttrConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAttr()) > 100 {
		err := AttrConfigValidationError{
			field:  "Attr",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) > 100 {
		err := AttrConfigValidationError{
			field:  "Title",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _AttrConfig_Kind_NotInLookup[m.GetKind()]; ok {
		err := AttrConfigValidationError{
			field:  "Kind",
			reason: "value must not be in list [ExtAttrKindNone]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := AttrConfig_Kind_name[int32(m.GetKind())]; !ok {
		err := AttrConfigValidationError{
			field:  "Kind",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetValue() != "" {

		if utf8.RuneCountInString(m.GetValue()) > 100 {
			err := AttrConfigValidationError{
				field:  "Value",
				reason: "value length must be at most 100 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(m.GetOptions()) > 0 {

		_AttrConfig_Options_Unique := make(map[string]struct{}, len(m.GetOptions()))

		for idx, item := range m.GetOptions() {
			_, _ = idx, item

			if _, exists := _AttrConfig_Options_Unique[item]; exists {
				err := AttrConfigValidationError{
					field:  fmt.Sprintf("Options[%v]", idx),
					reason: "repeated value must contain unique items",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			} else {
				_AttrConfig_Options_Unique[item] = struct{}{}
			}

			// no validation rules for Options[idx]
		}

	}

	if all {
		switch v := interface{}(m.GetConflict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AttrConfigValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AttrConfigValidationError{
					field:  "Conflict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConflict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AttrConfigValidationError{
				field:  "Conflict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AttrConfigMultiError(errors)
	}

	return nil
}

// AttrConfigMultiError is an error wrapping multiple validation errors
// returned by AttrConfig.ValidateAll() if the designated constraints aren't met.
type AttrConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrConfigMultiError) AllErrors() []error { return m }

// AttrConfigValidationError is the validation error returned by
// AttrConfig.Validate if the designated constraints aren't met.
type AttrConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrConfigValidationError) ErrorName() string { return "AttrConfigValidationError" }

// Error satisfies the builtin error interface
func (e AttrConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrConfigValidationError{}

var _AttrConfig_Kind_NotInLookup = map[AttrConfig_Kind]struct{}{
	0: {},
}
