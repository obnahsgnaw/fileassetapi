// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fileasset_backend_api/upload/v1/upload.proto

package uploadv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FetchUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchUrlRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchUrlRequestMultiError, or nil if none found.
func (m *FetchUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := FetchUrlRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() < 0 {
		err := FetchUrlRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSessionId()) > 30 {
		err := FetchUrlRequestValidationError{
			field:  "SessionId",
			reason: "value length must be at most 30 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModule()) > 100 {
		err := FetchUrlRequestValidationError{
			field:  "Module",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxSize() <= 0 {
		err := FetchUrlRequestValidationError{
			field:  "MaxSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetContentType()); l < 1 || l > 50 {
		err := FetchUrlRequestValidationError{
			field:  "ContentType",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExtension()) > 50 {
		err := FetchUrlRequestValidationError{
			field:  "Extension",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTtl(); val < 0 || val > 604800 {
		err := FetchUrlRequestValidationError{
			field:  "Ttl",
			reason: "value must be inside range [0, 604800]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPart(); val < 0 || val > 9999 {
		err := FetchUrlRequestValidationError{
			field:  "Part",
			reason: "value must be inside range [0, 9999]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetMaxCount(); val < 0 || val > 9999 {
		err := FetchUrlRequestValidationError{
			field:  "MaxCount",
			reason: "value must be inside range [0, 9999]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Update

	if len(errors) > 0 {
		return FetchUrlRequestMultiError(errors)
	}

	return nil
}

// FetchUrlRequestMultiError is an error wrapping multiple validation errors
// returned by FetchUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type FetchUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchUrlRequestMultiError) AllErrors() []error { return m }

// FetchUrlRequestValidationError is the validation error returned by
// FetchUrlRequest.Validate if the designated constraints aren't met.
type FetchUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchUrlRequestValidationError) ErrorName() string { return "FetchUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e FetchUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchUrlRequestValidationError{}

// Validate checks the field values on FetchUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchUrlResponseMultiError, or nil if none found.
func (m *FetchUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Module

	// no validation rules for UploadId

	// no validation rules for Name

	if len(errors) > 0 {
		return FetchUrlResponseMultiError(errors)
	}

	return nil
}

// FetchUrlResponseMultiError is an error wrapping multiple validation errors
// returned by FetchUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type FetchUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchUrlResponseMultiError) AllErrors() []error { return m }

// FetchUrlResponseValidationError is the validation error returned by
// FetchUrlResponse.Validate if the designated constraints aren't met.
type FetchUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchUrlResponseValidationError) ErrorName() string { return "FetchUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e FetchUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchUrlResponseValidationError{}

// Validate checks the field values on ConfirmRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ConfirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConfirmRequestMultiError,
// or nil if none found.
func (m *ConfirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := ConfirmRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUid() < 0 {
		err := ConfirmRequestValidationError{
			field:  "Uid",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSessionId()) > 30 {
		err := ConfirmRequestValidationError{
			field:  "SessionId",
			reason: "value length must be at most 30 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModule()) > 100 {
		err := ConfirmRequestValidationError{
			field:  "Module",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTarget()) > 50 {
		err := ConfirmRequestValidationError{
			field:  "Target",
			reason: "value length must be at most 50 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ConfirmRequest_Names_Unique := make(map[string]struct{}, len(m.GetNames()))

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if _, exists := _ConfirmRequest_Names_Unique[item]; exists {
			err := ConfirmRequestValidationError{
				field:  fmt.Sprintf("Names[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ConfirmRequest_Names_Unique[item] = struct{}{}
		}

		// no validation rules for Names[idx]
	}

	if len(errors) > 0 {
		return ConfirmRequestMultiError(errors)
	}

	return nil
}

// ConfirmRequestMultiError is an error wrapping multiple validation errors
// returned by ConfirmRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmRequestMultiError) AllErrors() []error { return m }

// ConfirmRequestValidationError is the validation error returned by
// ConfirmRequest.Validate if the designated constraints aren't met.
type ConfirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmRequestValidationError) ErrorName() string { return "ConfirmRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmRequestValidationError{}

// Validate checks the field values on ConfirmResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfirmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfirmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfirmResponseMultiError, or nil if none found.
func (m *ConfirmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfirmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Error

	if len(errors) > 0 {
		return ConfirmResponseMultiError(errors)
	}

	return nil
}

// ConfirmResponseMultiError is an error wrapping multiple validation errors
// returned by ConfirmResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfirmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfirmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfirmResponseMultiError) AllErrors() []error { return m }

// ConfirmResponseValidationError is the validation error returned by
// ConfirmResponse.Validate if the designated constraints aren't met.
type ConfirmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfirmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfirmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfirmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfirmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfirmResponseValidationError) ErrorName() string { return "ConfirmResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConfirmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfirmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfirmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfirmResponseValidationError{}
