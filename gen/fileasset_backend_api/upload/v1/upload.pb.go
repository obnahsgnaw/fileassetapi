// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: fileasset_backend_api/upload/v1/upload.proto

package uploadv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 某个服务，某个用户，某个模块 需要文件上传
type FetchUrlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project     string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Uid         uint32 `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	SessionId   string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Module      string `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	MaxSize     uint32 `protobuf:"varint,5,opt,name=max_size,json=maxSize,proto3" json:"max_size,omitempty"`
	ContentType string `protobuf:"bytes,6,opt,name=content_type,json=contentType,proto3" json:"content_type,omitempty"`
	Extension   string `protobuf:"bytes,7,opt,name=extension,proto3" json:"extension,omitempty"`
	Ttl         uint32 `protobuf:"varint,8,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Part        uint32 `protobuf:"varint,9,opt,name=part,proto3" json:"part,omitempty"`
	MaxCount    uint32 `protobuf:"varint,10,opt,name=max_count,json=maxCount,proto3" json:"max_count,omitempty"`
}

func (x *FetchUrlRequest) Reset() {
	*x = FetchUrlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUrlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUrlRequest) ProtoMessage() {}

func (x *FetchUrlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUrlRequest.ProtoReflect.Descriptor instead.
func (*FetchUrlRequest) Descriptor() ([]byte, []int) {
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP(), []int{0}
}

func (x *FetchUrlRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *FetchUrlRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FetchUrlRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *FetchUrlRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FetchUrlRequest) GetMaxSize() uint32 {
	if x != nil {
		return x.MaxSize
	}
	return 0
}

func (x *FetchUrlRequest) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FetchUrlRequest) GetExtension() string {
	if x != nil {
		return x.Extension
	}
	return ""
}

func (x *FetchUrlRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *FetchUrlRequest) GetPart() uint32 {
	if x != nil {
		return x.Part
	}
	return 0
}

func (x *FetchUrlRequest) GetMaxCount() uint32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

type FetchUrlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   string   `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Name     string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	UploadId string   `protobuf:"bytes,3,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	Url      []string `protobuf:"bytes,4,rep,name=url,proto3" json:"url,omitempty"` // 如果分片会返回多个 所以是多个
}

func (x *FetchUrlResponse) Reset() {
	*x = FetchUrlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchUrlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchUrlResponse) ProtoMessage() {}

func (x *FetchUrlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchUrlResponse.ProtoReflect.Descriptor instead.
func (*FetchUrlResponse) Descriptor() ([]byte, []int) {
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP(), []int{1}
}

func (x *FetchUrlResponse) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *FetchUrlResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FetchUrlResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FetchUrlResponse) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

type ConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Project   string      `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Uid       uint32      `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	SessionId string      `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Module    string      `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Target    string      `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	Items     []*FileItem `protobuf:"bytes,6,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ConfirmRequest) Reset() {
	*x = ConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmRequest) ProtoMessage() {}

func (x *ConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmRequest.ProtoReflect.Descriptor instead.
func (*ConfirmRequest) Descriptor() ([]byte, []int) {
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP(), []int{2}
}

func (x *ConfirmRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *ConfirmRequest) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *ConfirmRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ConfirmRequest) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *ConfirmRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ConfirmRequest) GetItems() []*FileItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type FileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadId string `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	Name     string `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *FileItem) Reset() {
	*x = FileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileItem) ProtoMessage() {}

func (x *FileItem) ProtoReflect() protoreflect.Message {
	mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileItem.ProtoReflect.Descriptor instead.
func (*FileItem) Descriptor() ([]byte, []int) {
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP(), []int{3}
}

func (x *FileItem) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *FileItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ConfirmResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ConfirmResponse) Reset() {
	*x = ConfirmResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmResponse) ProtoMessage() {}

func (x *ConfirmResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmResponse.ProtoReflect.Descriptor instead.
func (*ConfirmResponse) Descriptor() ([]byte, []int) {
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP(), []int{4}
}

func (x *ConfirmResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ConfirmResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_fileasset_backend_api_upload_v1_upload_proto protoreflect.FileDescriptor

var file_fileasset_backend_api_upload_v1_upload_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e,
	0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x04, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x55, 0x72, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x13,
	0x32, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xd2, 0x01, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0x64, 0xd0, 0x01, 0x00, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0b, 0x32, 0x03, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x03,
	0x75, 0x69, 0x64, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x28, 0x00, 0x40, 0x00, 0x52, 0x03, 0x75, 0x69,
	0x64, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92, 0x41, 0x19, 0x32, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0x1e, 0xd0, 0x01, 0x00, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0x92, 0x41, 0x11, 0x32, 0x06, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0xd2, 0x01, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xfa, 0x42,
	0x07, 0x72, 0x05, 0x18, 0x64, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x34, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x0d, 0x32, 0x04, 0x73, 0x69, 0x7a, 0x65, 0xd2, 0x01, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0xfa, 0x42, 0x06, 0x2a, 0x04, 0x20, 0x00, 0x40, 0x00, 0x52, 0x07, 0x6d,
	0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2c, 0x92, 0x41,
	0x1d, 0x32, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xd2,
	0x01, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0xfa, 0x42,
	0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0x32, 0xd0, 0x01, 0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0x92, 0x41, 0x17, 0x32,
	0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xd2, 0x01, 0x09, 0x65, 0x78, 0x74,
	0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0xfa, 0x42, 0x07, 0x72, 0x05, 0x18, 0x32, 0xd0, 0x01, 0x00,
	0x52, 0x09, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x1b, 0x92, 0x41, 0x0b, 0x32, 0x03, 0x74,
	0x74, 0x6c, 0xd2, 0x01, 0x03, 0x74, 0x74, 0x6c, 0xfa, 0x42, 0x0a, 0x2a, 0x08, 0x18, 0x80, 0xf5,
	0x24, 0x28, 0x00, 0x40, 0x00, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0x92, 0x41, 0x0a, 0x32, 0x08, 0x70,
	0x61, 0x72, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18, 0x8f, 0x4e, 0x28,
	0x00, 0x40, 0x00, 0x52, 0x04, 0x70, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x18, 0x92, 0x41,
	0x09, 0x32, 0x07, 0x6d, 0x61, 0x78, 0x20, 0x6e, 0x75, 0x6d, 0xfa, 0x42, 0x09, 0x2a, 0x07, 0x18,
	0x8f, 0x4e, 0x20, 0x00, 0x40, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xbc, 0x01, 0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20,
	0x69, 0x64, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0f, 0x92, 0x41, 0x0c, 0x32, 0x0a,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x75, 0x72, 0x6c, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22,
	0xe9, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x13, 0x32, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0xd2, 0x01, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x18, 0x64, 0xd0, 0x01, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x29,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x17, 0x92, 0x41, 0x0b,
	0x32, 0x03, 0x75, 0x69, 0x64, 0xd2, 0x01, 0x03, 0x75, 0x69, 0x64, 0xfa, 0x42, 0x06, 0x2a, 0x04,
	0x28, 0x00, 0x40, 0x00, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0x92,
	0x41, 0x19, 0x32, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xd2, 0x01,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0xfa, 0x42, 0x07, 0x72, 0x05,
	0x18, 0x1e, 0xd0, 0x01, 0x00, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x2d, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x15, 0x92, 0x41, 0x08, 0x32, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0xfa, 0x42, 0x07,
	0x72, 0x05, 0x18, 0x64, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x2d, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x08, 0x32, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0xfa, 0x42, 0x07, 0x72,
	0x05, 0x18, 0x32, 0xd0, 0x01, 0x00, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4b,
	0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x42, 0x0a, 0x92, 0x41, 0x07, 0x32, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x68, 0x0a, 0x08, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x35, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32,
	0x13, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x20, 0x75, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x20, 0x69, 0x64, 0x52, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x12, 0x25,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x06, 0x32, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xd0, 0x01, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6e, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x32, 0xa7, 0x04, 0x0a, 0x0d, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x02, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x55, 0x72, 0x6c, 0x12, 0x30, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x72, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x55, 0x72,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x95, 0x01, 0x92, 0x41, 0x7c, 0x12,
	0x12, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0x1a, 0x48, 0xe5, 0x85, 0xb6, 0xe4, 0xbb, 0x96, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a,
	0xa1, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe5, 0x9c, 0xb0,
	0xe5, 0x9d, 0x80, 0xe5, 0xaf, 0xb9, 0xe5, 0xa4, 0x96, 0xe7, 0xbb, 0x99, 0xe5, 0x87, 0xba, 0xef,
	0xbc, 0x8c, 0xe8, 0xbf, 0x99, 0xe9, 0x87, 0x8c, 0xe4, 0xb9, 0x9f, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb,
	0xa5, 0xe6, 0x89, 0x8b, 0xe5, 0x8a, 0xa8, 0xe8, 0x8e, 0xb7, 0xe5, 0x8f, 0x96, 0x62, 0x1c, 0x0a,
	0x09, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x00, 0x0a, 0x0f, 0x0a, 0x0b, 0x42, 0x65,
	0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2d, 0x75, 0x72,
	0x6c, 0x12, 0xf6, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x2f, 0x2e,
	0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x87, 0x01, 0x92, 0x41, 0x67, 0x12, 0x15, 0xe7, 0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe4, 0xb8,
	0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0x9a, 0x84, 0xe6, 0x96, 0x87, 0xe4, 0xbb, 0xb6, 0x1a, 0x30, 0xe7,
	0xa1, 0xae, 0xe8, 0xae, 0xa4, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe7, 0x9a, 0x84, 0xe6, 0x96,
	0x87, 0xe4, 0xbb, 0xb6, 0xef, 0xbc, 0x8c, 0xe5, 0x90, 0xa6, 0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a,
	0xe8, 0xa2, 0xab, 0xe8, 0x87, 0xaa, 0xe5, 0x8a, 0xa8, 0xe6, 0x83, 0x85, 0xe5, 0x86, 0xb5, 0x62,
	0x1c, 0x0a, 0x09, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x00, 0x0a, 0x0f, 0x0a, 0x0b,
	0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x22, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0x13, 0x92, 0x41, 0x10, 0x12,
	0x0e, 0x31, 0x2e, 0xe4, 0xb8, 0x8a, 0xe4, 0xbc, 0xa0, 0xe6, 0x9c, 0x8d, 0xe5, 0x8a, 0xa1, 0x42,
	0x99, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x66, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x75, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x76, 0x31, 0x42, 0x0b, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x4f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6f, 0x62, 0x6e, 0x61, 0x68, 0x73, 0x67, 0x6e, 0x61, 0x77, 0x2f, 0x66, 0x69,
	0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x66,
	0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x5f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2f, 0x76, 0x31, 0x3b, 0x75,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x46, 0x55, 0x58, 0xaa, 0x02, 0x1d,
	0x46, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x1d,
	0x46, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x5c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x29,
	0x46, 0x69, 0x6c, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64,
	0x41, 0x70, 0x69, 0x5c, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1f, 0x46, 0x69, 0x6c, 0x65,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x69, 0x3a,
	0x3a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fileasset_backend_api_upload_v1_upload_proto_rawDescOnce sync.Once
	file_fileasset_backend_api_upload_v1_upload_proto_rawDescData = file_fileasset_backend_api_upload_v1_upload_proto_rawDesc
)

func file_fileasset_backend_api_upload_v1_upload_proto_rawDescGZIP() []byte {
	file_fileasset_backend_api_upload_v1_upload_proto_rawDescOnce.Do(func() {
		file_fileasset_backend_api_upload_v1_upload_proto_rawDescData = protoimpl.X.CompressGZIP(file_fileasset_backend_api_upload_v1_upload_proto_rawDescData)
	})
	return file_fileasset_backend_api_upload_v1_upload_proto_rawDescData
}

var file_fileasset_backend_api_upload_v1_upload_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fileasset_backend_api_upload_v1_upload_proto_goTypes = []interface{}{
	(*FetchUrlRequest)(nil),  // 0: fileasset_backend_api.upload.v1.FetchUrlRequest
	(*FetchUrlResponse)(nil), // 1: fileasset_backend_api.upload.v1.FetchUrlResponse
	(*ConfirmRequest)(nil),   // 2: fileasset_backend_api.upload.v1.ConfirmRequest
	(*FileItem)(nil),         // 3: fileasset_backend_api.upload.v1.FileItem
	(*ConfirmResponse)(nil),  // 4: fileasset_backend_api.upload.v1.ConfirmResponse
}
var file_fileasset_backend_api_upload_v1_upload_proto_depIdxs = []int32{
	3, // 0: fileasset_backend_api.upload.v1.ConfirmRequest.items:type_name -> fileasset_backend_api.upload.v1.FileItem
	0, // 1: fileasset_backend_api.upload.v1.UploadService.FetchUrl:input_type -> fileasset_backend_api.upload.v1.FetchUrlRequest
	2, // 2: fileasset_backend_api.upload.v1.UploadService.Confirm:input_type -> fileasset_backend_api.upload.v1.ConfirmRequest
	1, // 3: fileasset_backend_api.upload.v1.UploadService.FetchUrl:output_type -> fileasset_backend_api.upload.v1.FetchUrlResponse
	4, // 4: fileasset_backend_api.upload.v1.UploadService.Confirm:output_type -> fileasset_backend_api.upload.v1.ConfirmResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_fileasset_backend_api_upload_v1_upload_proto_init() }
func file_fileasset_backend_api_upload_v1_upload_proto_init() {
	if File_fileasset_backend_api_upload_v1_upload_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUrlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchUrlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fileasset_backend_api_upload_v1_upload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fileasset_backend_api_upload_v1_upload_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fileasset_backend_api_upload_v1_upload_proto_goTypes,
		DependencyIndexes: file_fileasset_backend_api_upload_v1_upload_proto_depIdxs,
		MessageInfos:      file_fileasset_backend_api_upload_v1_upload_proto_msgTypes,
	}.Build()
	File_fileasset_backend_api_upload_v1_upload_proto = out.File
	file_fileasset_backend_api_upload_v1_upload_proto_rawDesc = nil
	file_fileasset_backend_api_upload_v1_upload_proto_goTypes = nil
	file_fileasset_backend_api_upload_v1_upload_proto_depIdxs = nil
}
