// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fileasset_backend_api/upload/v1/upload.proto

package uploadv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploadService_FetchKey_FullMethodName = "/fileasset_backend_api.upload.v1.UploadService/FetchKey"
	UploadService_Confirm_FullMethodName  = "/fileasset_backend_api.upload.v1.UploadService/Confirm"
)

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadServiceClient interface {
	// 获取特定配置的上传key
	FetchKey(ctx context.Context, in *FetchKeyRequest, opts ...grpc.CallOption) (*FetchKeyResponse, error)
	// 确认上传文件
	Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error)
}

type uploadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUploadServiceClient(cc grpc.ClientConnInterface) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) FetchKey(ctx context.Context, in *FetchKeyRequest, opts ...grpc.CallOption) (*FetchKeyResponse, error) {
	out := new(FetchKeyResponse)
	err := c.cc.Invoke(ctx, UploadService_FetchKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadServiceClient) Confirm(ctx context.Context, in *ConfirmRequest, opts ...grpc.CallOption) (*ConfirmResponse, error) {
	out := new(ConfirmResponse)
	err := c.cc.Invoke(ctx, UploadService_Confirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
// All implementations should embed UnimplementedUploadServiceServer
// for forward compatibility
type UploadServiceServer interface {
	// 获取特定配置的上传key
	FetchKey(context.Context, *FetchKeyRequest) (*FetchKeyResponse, error)
	// 确认上传文件
	Confirm(context.Context, *ConfirmRequest) (*ConfirmResponse, error)
}

// UnimplementedUploadServiceServer should be embedded to have forward compatible implementations.
type UnimplementedUploadServiceServer struct {
}

func (UnimplementedUploadServiceServer) FetchKey(context.Context, *FetchKeyRequest) (*FetchKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchKey not implemented")
}
func (UnimplementedUploadServiceServer) Confirm(context.Context, *ConfirmRequest) (*ConfirmResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}

// UnsafeUploadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadServiceServer will
// result in compilation errors.
type UnsafeUploadServiceServer interface {
	mustEmbedUnimplementedUploadServiceServer()
}

func RegisterUploadServiceServer(s grpc.ServiceRegistrar, srv UploadServiceServer) {
	s.RegisterService(&UploadService_ServiceDesc, srv)
}

func _UploadService_FetchKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).FetchKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_FetchKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).FetchKey(ctx, req.(*FetchKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UploadService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UploadService_Confirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).Confirm(ctx, req.(*ConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UploadService_ServiceDesc is the grpc.ServiceDesc for UploadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileasset_backend_api.upload.v1.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchKey",
			Handler:    _UploadService_FetchKey_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _UploadService_Confirm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileasset_backend_api/upload/v1/upload.proto",
}
