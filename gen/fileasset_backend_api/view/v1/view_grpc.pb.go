// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: fileasset_backend_api/view/v1/view.proto

package viewv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ViewService_ViewUrl_FullMethodName  = "/fileasset_backend_api.view.v1.ViewService/ViewUrl"
	ViewService_ViewUrls_FullMethodName = "/fileasset_backend_api.view.v1.ViewService/ViewUrls"
)

// ViewServiceClient is the client API for ViewService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewServiceClient interface {
	ViewUrl(ctx context.Context, in *ViewUrlRequest, opts ...grpc.CallOption) (*ViewUrlResponse, error)
	ViewUrls(ctx context.Context, in *ViewUrlsRequest, opts ...grpc.CallOption) (*ViewUrlsResponse, error)
}

type viewServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewViewServiceClient(cc grpc.ClientConnInterface) ViewServiceClient {
	return &viewServiceClient{cc}
}

func (c *viewServiceClient) ViewUrl(ctx context.Context, in *ViewUrlRequest, opts ...grpc.CallOption) (*ViewUrlResponse, error) {
	out := new(ViewUrlResponse)
	err := c.cc.Invoke(ctx, ViewService_ViewUrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewServiceClient) ViewUrls(ctx context.Context, in *ViewUrlsRequest, opts ...grpc.CallOption) (*ViewUrlsResponse, error) {
	out := new(ViewUrlsResponse)
	err := c.cc.Invoke(ctx, ViewService_ViewUrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServiceServer is the server API for ViewService service.
// All implementations should embed UnimplementedViewServiceServer
// for forward compatibility
type ViewServiceServer interface {
	ViewUrl(context.Context, *ViewUrlRequest) (*ViewUrlResponse, error)
	ViewUrls(context.Context, *ViewUrlsRequest) (*ViewUrlsResponse, error)
}

// UnimplementedViewServiceServer should be embedded to have forward compatible implementations.
type UnimplementedViewServiceServer struct {
}

func (UnimplementedViewServiceServer) ViewUrl(context.Context, *ViewUrlRequest) (*ViewUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUrl not implemented")
}
func (UnimplementedViewServiceServer) ViewUrls(context.Context, *ViewUrlsRequest) (*ViewUrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewUrls not implemented")
}

// UnsafeViewServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewServiceServer will
// result in compilation errors.
type UnsafeViewServiceServer interface {
	mustEmbedUnimplementedViewServiceServer()
}

func RegisterViewServiceServer(s grpc.ServiceRegistrar, srv ViewServiceServer) {
	s.RegisterService(&ViewService_ServiceDesc, srv)
}

func _ViewService_ViewUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).ViewUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_ViewUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).ViewUrl(ctx, req.(*ViewUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ViewService_ViewUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewUrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServiceServer).ViewUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ViewService_ViewUrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServiceServer).ViewUrls(ctx, req.(*ViewUrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ViewService_ServiceDesc is the grpc.ServiceDesc for ViewService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ViewService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileasset_backend_api.view.v1.ViewService",
	HandlerType: (*ViewServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ViewUrl",
			Handler:    _ViewService_ViewUrl_Handler,
		},
		{
			MethodName: "ViewUrls",
			Handler:    _ViewService_ViewUrls_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fileasset_backend_api/view/v1/view.proto",
}
