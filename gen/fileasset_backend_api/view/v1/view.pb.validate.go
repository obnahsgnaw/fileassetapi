// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: fileasset_backend_api/view/v1/view.proto

package viewv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ViewUrlRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ViewUrlRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewUrlRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ViewUrlRequestMultiError,
// or nil if none found.
func (m *ViewUrlRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewUrlRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := ViewUrlRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModule()) > 100 {
		err := ViewUrlRequestValidationError{
			field:  "Module",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 30 || l > 50 {
		err := ViewUrlRequestValidationError{
			field:  "Name",
			reason: "value length must be between 30 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetTtl(); val <= 0 || val >= 604800 {
		err := ViewUrlRequestValidationError{
			field:  "Ttl",
			reason: "value must be inside range (0, 604800)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewUrlRequestMultiError(errors)
	}

	return nil
}

// ViewUrlRequestMultiError is an error wrapping multiple validation errors
// returned by ViewUrlRequest.ValidateAll() if the designated constraints
// aren't met.
type ViewUrlRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewUrlRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewUrlRequestMultiError) AllErrors() []error { return m }

// ViewUrlRequestValidationError is the validation error returned by
// ViewUrlRequest.Validate if the designated constraints aren't met.
type ViewUrlRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewUrlRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewUrlRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewUrlRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewUrlRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewUrlRequestValidationError) ErrorName() string { return "ViewUrlRequestValidationError" }

// Error satisfies the builtin error interface
func (e ViewUrlRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewUrlRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewUrlRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewUrlRequestValidationError{}

// Validate checks the field values on ViewUrlResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ViewUrlResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewUrlResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewUrlResponseMultiError, or nil if none found.
func (m *ViewUrlResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewUrlResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return ViewUrlResponseMultiError(errors)
	}

	return nil
}

// ViewUrlResponseMultiError is an error wrapping multiple validation errors
// returned by ViewUrlResponse.ValidateAll() if the designated constraints
// aren't met.
type ViewUrlResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewUrlResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewUrlResponseMultiError) AllErrors() []error { return m }

// ViewUrlResponseValidationError is the validation error returned by
// ViewUrlResponse.Validate if the designated constraints aren't met.
type ViewUrlResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewUrlResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewUrlResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewUrlResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewUrlResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewUrlResponseValidationError) ErrorName() string { return "ViewUrlResponseValidationError" }

// Error satisfies the builtin error interface
func (e ViewUrlResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewUrlResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewUrlResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewUrlResponseValidationError{}

// Validate checks the field values on ViewUrlsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ViewUrlsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewUrlsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewUrlsRequestMultiError, or nil if none found.
func (m *ViewUrlsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewUrlsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetProject()) > 100 {
		err := ViewUrlsRequestValidationError{
			field:  "Project",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetModule()) > 100 {
		err := ViewUrlsRequestValidationError{
			field:  "Module",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_ViewUrlsRequest_Names_Unique := make(map[string]struct{}, len(m.GetNames()))

	for idx, item := range m.GetNames() {
		_, _ = idx, item

		if _, exists := _ViewUrlsRequest_Names_Unique[item]; exists {
			err := ViewUrlsRequestValidationError{
				field:  fmt.Sprintf("Names[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_ViewUrlsRequest_Names_Unique[item] = struct{}{}
		}

		// no validation rules for Names[idx]
	}

	if val := m.GetTtl(); val <= 0 || val >= 604800 {
		err := ViewUrlsRequestValidationError{
			field:  "Ttl",
			reason: "value must be inside range (0, 604800)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ViewUrlsRequestMultiError(errors)
	}

	return nil
}

// ViewUrlsRequestMultiError is an error wrapping multiple validation errors
// returned by ViewUrlsRequest.ValidateAll() if the designated constraints
// aren't met.
type ViewUrlsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewUrlsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewUrlsRequestMultiError) AllErrors() []error { return m }

// ViewUrlsRequestValidationError is the validation error returned by
// ViewUrlsRequest.Validate if the designated constraints aren't met.
type ViewUrlsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewUrlsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewUrlsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewUrlsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewUrlsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewUrlsRequestValidationError) ErrorName() string { return "ViewUrlsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ViewUrlsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewUrlsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewUrlsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewUrlsRequestValidationError{}

// Validate checks the field values on ViewUrlsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ViewUrlsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ViewUrlsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ViewUrlsResponseMultiError, or nil if none found.
func (m *ViewUrlsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ViewUrlsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Urls

	if len(errors) > 0 {
		return ViewUrlsResponseMultiError(errors)
	}

	return nil
}

// ViewUrlsResponseMultiError is an error wrapping multiple validation errors
// returned by ViewUrlsResponse.ValidateAll() if the designated constraints
// aren't met.
type ViewUrlsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ViewUrlsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ViewUrlsResponseMultiError) AllErrors() []error { return m }

// ViewUrlsResponseValidationError is the validation error returned by
// ViewUrlsResponse.Validate if the designated constraints aren't met.
type ViewUrlsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewUrlsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewUrlsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewUrlsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewUrlsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewUrlsResponseValidationError) ErrorName() string { return "ViewUrlsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ViewUrlsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sViewUrlsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewUrlsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewUrlsResponseValidationError{}
